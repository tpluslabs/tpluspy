{"compilers":[{"contractTypes":["SigTest","MockTarget"],"name":"solidity","settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"src/.cache/solady/main/src/utils/ECDSA.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]},"src/.cache/solady/main/src/utils/EfficientHashLib.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]},"src/.cache/solady/main/src/utils/SafeTransferLib.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]}},"remappings":["solady=src/.cache/solady/main/src"],"viaIR":true},"version":"0.8.28+commit.7893614a"},{"contractTypes":["Checkpointer","DepositVault","Registry","IAtomicSettlementCallback"],"name":"solidity","settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"src/.cache/solady/main/src/utils/ECDSA.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]},"src/.cache/solady/main/src/utils/EfficientHashLib.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]},"src/.cache/solady/main/src/utils/SafeTransferLib.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]},"src/.cache/solady/main/src/utils/SignatureCheckerLib.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]},"src/Checkpointer.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]},"src/DepositVault.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]},"src/Registry.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]},"src/interfaces/IAtomicSettlementCallback.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]}},"remappings":["solady=src/.cache/solady/main/src"],"viaIR":true},"version":"0.8.30+commit.73712a01"}],"contractTypes":{"Checkpointer":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AlreadySet","type":"error"},{"inputs":[],"name":"InvalidSignature","type":"error"},{"inputs":[],"name":"NotAdmin","type":"error"},{"inputs":[],"name":"NotCouncilMultisig","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string[]","name":"approvedWithdrawals","type":"string[]"}],"name":"Withdrawals","type":"event"},{"inputs":[],"name":"CHECKPOINT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"sharedSignature","type":"bytes"},{"internalType":"bytes","name":"leaderSignature","type":"bytes"},{"components":[{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint8[]","name":"stateRoot","type":"uint8[]"},{"internalType":"string[]","name":"approvedWithdrawals","type":"string[]"}],"internalType":"struct Checkpointer.Checkpoint","name":"_checkpoint","type":"tuple"}],"name":"checkpoint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"councilMultisig","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"leader","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAdmin","type":"address"}],"name":"setAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"domainSeparator","type":"bytes32"}],"name":"setDomainSeparator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newCouncilMultisig","type":"address"}],"name":"setInitialCouncilMultisig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newLeader","type":"address"}],"name":"setLeader","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newCouncilMultisig","type":"address"}],"name":"setNewCouncilMultisig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"stateRoot","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stateRootNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"contractName":"Checkpointer","deploymentBytecode":{"bytecode":"0x608080604052346026575f80546001600160a01b03191633179055610b3e908161002b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816307ddaf53146108be575080633ea987d31461086657806340eedabb1461083e5780634331e8dd146107ea5780635fa993b214610792578063704b6c02146107455780637438b937146106f657806374ebc7a0146106d95780638bbb26a314610150578063cc2fc84514610105578063e1193e4c146100cb5763f851a440146100a0575f80fd5b346100c7575f3660031901126100c7575f546040516001600160a01b039091168152602090f35b5f80fd5b346100c7575f3660031901126100c75760206040517ff0231fa1a05c1ebcb4f35a12b1dcea172e840b8488bfdf9a22a26a8c427f94d88152f35b346100c75760203660031901126100c7576004356005548110156100c75760209060055f5260ff8160051c5f516020610ae95f395f51905f52015460f86040519360031b161c168152f35b346100c75760603660031901126100c75760043567ffffffffffffffff81116100c7576101819036906004016108e1565b60243567ffffffffffffffff81116100c7576101a19036906004016108e1565b906044359267ffffffffffffffff84116100c7578360040191606060031986360301126100c757823593600354918286036100c75760248701916101e5838761090f565b906040519060208201928391905f905b8082106106b45750505090610216816044949303601f198101835282610945565b519020980194610226868861090f565b610232819c929c610967565b9b6102406040519d8e610945565b818d5260208d019160051b8101903682116100c75780925b82841061067757505050508a51986102886102728b610967565b9a6102806040519c8d610945565b808c52610967565b60208b019b90601f1901368d375f5b8d518110156102c857808c8f826102b36001956102c1936109d3565b5160208151910120926109d3565b5201610297565b506040518b5160208201919082908f905f5b81811061066157505050918161030361039f97959361039999979503601f198101835282610945565b5190206040519160208301937ff0231fa1a05c1ebcb4f35a12b1dcea172e840b8488bfdf9a22a26a8c427f94d885526040840152606083015260808201526080815261035060a082610945565b5190206004549060405190602082019261190160f01b84526022830152604282015260428152610381606282610945565b51902093849160018060a01b035f541693369161097f565b916109fb565b15610652576103996103be9360018060a01b036001541693369161097f565b15610652575f19821461063e5760016103db92016003558361090f565b929067ffffffffffffffff841161062a5768010000000000000000841161062a57600554846005558085106105a0575b509260055f528060051c5f5b81811061055e5750601f1982169091039081610500575b505061043a925061090f565b906040519082602083016020845252604082019060408460051b84010193815f90601e19813603015b838310610492577fef889901cd5d865c829bdf171647f02f76efbce3c0cba77197094981f41a727c87890388a1005b909192939496603f198782030188528535828112156100c7578301906020823592019167ffffffffffffffff81116100c75780360383136100c7576020828280600196849695859652848401375f828201840152601f01601f19160101999190910196019493019190610463565b5f9485925b80871061052a57505061043a94505f516020610ae95f395f51905f520155838061042e565b909260206105536001928961053e886109c5565b919060ff809160031b9316831b921b19161790565b940196019590610505565b5f5f5b6020811061058357505f516020610ae95f395f51905f52820155600101610417565b969060206105976001928a61053e866109c5565b92019701610561565b601f80860160051c910160051c5f516020610ae95f395f51905f520190601f8616806105f0575b505f516020610ae95f395f51905f52015b8181106105e5575061040b565b5f81556001016105d8565b7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3daf8201908154905f199060200360031b1c169055866105c7565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b638baa579f60e01b5f5260045ffd5b82518452602093840193909201916001016102da565b833567ffffffffffffffff81116100c757820136601f820112156100c7576020916106a983923690848135910161097f565b815201930192610258565b90919283359060ff82168092036100c7576020816001938293520194019201906101f5565b346100c7575f3660031901126100c7576020600354604051908152f35b346100c75760203660031901126100c7575f546001600160a01b031633036107365760045461072757600480359055005b63a741a04560e01b5f5260045ffd5b637bfa4b9f60e01b5f5260045ffd5b346100c75760203660031901126100c7576004356001600160a01b038116908190036100c7575f546001600160a01b03811633036107365781156100c7576001600160a01b031916175f55005b346100c75760203660031901126100c7576004356001600160a01b038116908190036100c7576002546001600160a01b03811633036107db576001600160a01b03191617600255005b638d62b6d960e01b5f5260045ffd5b346100c75760203660031901126100c7576004356001600160a01b038116908190036100c7576002546001600160a01b031633036107db576bffffffffffffffffffffffff60a01b60015416176001555f80f35b346100c7575f3660031901126100c7576001546040516001600160a01b039091168152602090f35b346100c75760203660031901126100c7576004356001600160a01b038116908190036100c7575f546001600160a01b03163303610736576002546001600160a01b038116610727576001600160a01b03191617600255005b346100c7575f3660031901126100c7576002546001600160a01b03168152602090f35b9181601f840112156100c75782359167ffffffffffffffff83116100c757602083818601950101116100c757565b903590601e19813603018212156100c7570180359067ffffffffffffffff82116100c757602001918160051b360383136100c757565b90601f8019910116810190811067ffffffffffffffff82111761062a57604052565b67ffffffffffffffff811161062a5760051b60200190565b92919267ffffffffffffffff821161062a57604051916109a9601f8201601f191660200184610945565b8294818452818301116100c7578281602093845f960137010152565b3560ff811681036100c75790565b80518210156109e75760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b90915f91906001600160a01b03821615610ae05760405192600484019460248501956044860192853b15610a6457509186939160209593630b135d3f60e11b8852526040845281518501809260045afa9360443d01915afa9151630b135d3f60e11b1491161690565b979650509050815180604014610abb57604114610a815750505050565b60209293955060608201515f1a835260408201516060525b5f5201516040526020600160805f825afa511860601b3d11915f606052604052565b506020929395506040820151601b8160ff1c01845260018060ff1b0316606052610a99565b505050505f9056fe036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0a2646970667358221220f09db22dfd6229ef82c2a681d2b8b25a406132cc8a7af0b418c1fe369f9f1f9964736f6c634300081e0033"},"devdoc":{"details":"Designed for use in DStack-like distributed settlement systems.","events":{"Withdrawals(string[])":{"params":{"approvedWithdrawals":"List of withdrawal IDs approved in the checkpoint."}}},"kind":"dev","methods":{"checkpoint(bytes,bytes,(uint256,uint8[],string[]))":{"details":"Requires valid EIP-712 signatures from both admin and leader.","params":{"_checkpoint":"The checkpoint payload to commit.","leaderSignature":"Signature by the leader.","sharedSignature":"Signature by the admin."}},"constructor":{"details":"Sets the deployer as the initial admin."},"setAdmin(address)":{"params":{"newAdmin":"The new admin address."}},"setDomainSeparator(bytes32)":{"params":{"domainSeparator":"The domain separator to store."}},"setInitialCouncilMultisig(address)":{"params":{"newCouncilMultisig":"The council's Gnosis Safe address."}},"setLeader(address)":{"details":"This should be reviewed depending on the leader rotation mechanism.","params":{"newLeader":"The address of the new leader node."}},"setNewCouncilMultisig(address)":{"params":{"newCouncilMultisig":"The new multisig address."}}},"stateVariables":{"admin":{"details":"Should be set to the DStack app shared secret public key."},"councilMultisig":{"details":"Can rotate the leader and self."},"leader":{"details":"Leader is responsible for signing and submitting new checkpoints."},"stateRoot":{"details":"Serialized as `(user, eth_balance, usdc_balance, deposit_nonce, is_mm)` tuples.      In production, this may store multiple roots and rotate."},"stateRootNonce":{"details":"Used to prevent replay attacks and enforce checkpoint ordering."}},"title":"Checkpointer","version":1},"methodIdentifiers":{"CHECKPOINT_TYPEHASH()":"0xe1193e4c","admin()":"0xf851a440","checkpoint(bytes,bytes,(uint256,uint8[],string[]))":"0x8bbb26a3","councilMultisig()":"0x07ddaf53","leader()":"0x40eedabb","setAdmin(address)":"0x704b6c02","setDomainSeparator(bytes32)":"0x7438b937","setInitialCouncilMultisig(address)":"0x3ea987d3","setLeader(address)":"0x4331e8dd","setNewCouncilMultisig(address)":"0x5fa993b2","stateRoot(uint256)":"0xcc2fc845","stateRootNonce()":"0x74ebc7a0"},"runtimeBytecode":{"bytecode":"0x6080806040526004361015610012575f80fd5b5f3560e01c90816307ddaf53146108be575080633ea987d31461086657806340eedabb1461083e5780634331e8dd146107ea5780635fa993b214610792578063704b6c02146107455780637438b937146106f657806374ebc7a0146106d95780638bbb26a314610150578063cc2fc84514610105578063e1193e4c146100cb5763f851a440146100a0575f80fd5b346100c7575f3660031901126100c7575f546040516001600160a01b039091168152602090f35b5f80fd5b346100c7575f3660031901126100c75760206040517ff0231fa1a05c1ebcb4f35a12b1dcea172e840b8488bfdf9a22a26a8c427f94d88152f35b346100c75760203660031901126100c7576004356005548110156100c75760209060055f5260ff8160051c5f516020610ae95f395f51905f52015460f86040519360031b161c168152f35b346100c75760603660031901126100c75760043567ffffffffffffffff81116100c7576101819036906004016108e1565b60243567ffffffffffffffff81116100c7576101a19036906004016108e1565b906044359267ffffffffffffffff84116100c7578360040191606060031986360301126100c757823593600354918286036100c75760248701916101e5838761090f565b906040519060208201928391905f905b8082106106b45750505090610216816044949303601f198101835282610945565b519020980194610226868861090f565b610232819c929c610967565b9b6102406040519d8e610945565b818d5260208d019160051b8101903682116100c75780925b82841061067757505050508a51986102886102728b610967565b9a6102806040519c8d610945565b808c52610967565b60208b019b90601f1901368d375f5b8d518110156102c857808c8f826102b36001956102c1936109d3565b5160208151910120926109d3565b5201610297565b506040518b5160208201919082908f905f5b81811061066157505050918161030361039f97959361039999979503601f198101835282610945565b5190206040519160208301937ff0231fa1a05c1ebcb4f35a12b1dcea172e840b8488bfdf9a22a26a8c427f94d885526040840152606083015260808201526080815261035060a082610945565b5190206004549060405190602082019261190160f01b84526022830152604282015260428152610381606282610945565b51902093849160018060a01b035f541693369161097f565b916109fb565b15610652576103996103be9360018060a01b036001541693369161097f565b15610652575f19821461063e5760016103db92016003558361090f565b929067ffffffffffffffff841161062a5768010000000000000000841161062a57600554846005558085106105a0575b509260055f528060051c5f5b81811061055e5750601f1982169091039081610500575b505061043a925061090f565b906040519082602083016020845252604082019060408460051b84010193815f90601e19813603015b838310610492577fef889901cd5d865c829bdf171647f02f76efbce3c0cba77197094981f41a727c87890388a1005b909192939496603f198782030188528535828112156100c7578301906020823592019167ffffffffffffffff81116100c75780360383136100c7576020828280600196849695859652848401375f828201840152601f01601f19160101999190910196019493019190610463565b5f9485925b80871061052a57505061043a94505f516020610ae95f395f51905f520155838061042e565b909260206105536001928961053e886109c5565b919060ff809160031b9316831b921b19161790565b940196019590610505565b5f5f5b6020811061058357505f516020610ae95f395f51905f52820155600101610417565b969060206105976001928a61053e866109c5565b92019701610561565b601f80860160051c910160051c5f516020610ae95f395f51905f520190601f8616806105f0575b505f516020610ae95f395f51905f52015b8181106105e5575061040b565b5f81556001016105d8565b7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3daf8201908154905f199060200360031b1c169055866105c7565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b638baa579f60e01b5f5260045ffd5b82518452602093840193909201916001016102da565b833567ffffffffffffffff81116100c757820136601f820112156100c7576020916106a983923690848135910161097f565b815201930192610258565b90919283359060ff82168092036100c7576020816001938293520194019201906101f5565b346100c7575f3660031901126100c7576020600354604051908152f35b346100c75760203660031901126100c7575f546001600160a01b031633036107365760045461072757600480359055005b63a741a04560e01b5f5260045ffd5b637bfa4b9f60e01b5f5260045ffd5b346100c75760203660031901126100c7576004356001600160a01b038116908190036100c7575f546001600160a01b03811633036107365781156100c7576001600160a01b031916175f55005b346100c75760203660031901126100c7576004356001600160a01b038116908190036100c7576002546001600160a01b03811633036107db576001600160a01b03191617600255005b638d62b6d960e01b5f5260045ffd5b346100c75760203660031901126100c7576004356001600160a01b038116908190036100c7576002546001600160a01b031633036107db576bffffffffffffffffffffffff60a01b60015416176001555f80f35b346100c7575f3660031901126100c7576001546040516001600160a01b039091168152602090f35b346100c75760203660031901126100c7576004356001600160a01b038116908190036100c7575f546001600160a01b03163303610736576002546001600160a01b038116610727576001600160a01b03191617600255005b346100c7575f3660031901126100c7576002546001600160a01b03168152602090f35b9181601f840112156100c75782359167ffffffffffffffff83116100c757602083818601950101116100c757565b903590601e19813603018212156100c7570180359067ffffffffffffffff82116100c757602001918160051b360383136100c757565b90601f8019910116810190811067ffffffffffffffff82111761062a57604052565b67ffffffffffffffff811161062a5760051b60200190565b92919267ffffffffffffffff821161062a57604051916109a9601f8201601f191660200184610945565b8294818452818301116100c7578281602093845f960137010152565b3560ff811681036100c75790565b80518210156109e75760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b90915f91906001600160a01b03821615610ae05760405192600484019460248501956044860192853b15610a6457509186939160209593630b135d3f60e11b8852526040845281518501809260045afa9360443d01915afa9151630b135d3f60e11b1491161690565b979650509050815180604014610abb57604114610a815750505050565b60209293955060608201515f1a835260408201516060525b5f5201516040526020600160805f825afa511860601b3d11915f606052604052565b506020929395506040820151601b8160ff1c01845260018060ff1b0316606052610a99565b505050505f9056fe036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0a2646970667358221220f09db22dfd6229ef82c2a681d2b8b25a406132cc8a7af0b418c1fe369f9f1f9964736f6c634300081e0033"},"sourceId":"src/Checkpointer.sol","sourcemap":"420:6397:4:-:0;;;;;;;2553:18;420:6397;;-1:-1:-1;;;;;;420:6397:4;2561:10;420:6397;;;;;;;;;;;;;","userdoc":{"errors":{"AlreadySet()":[{"notice":"Reverts if a value has already been set."}],"InvalidSignature()":[{"notice":"Reverts if a signature does not match the expected signer or payload."}],"NotAdmin()":[{"notice":"Reverts if caller is not the admin."}],"NotCouncilMultisig()":[{"notice":"Reverts if caller is not the current council multisig."}]},"events":{"Withdrawals(string[])":{"notice":"Emitted when a new list of approved withdrawals is recorded in a checkpoint."}},"kind":"user","methods":{"CHECKPOINT_TYPEHASH()":{"notice":"Typehash used for EIP-712 encoding of the Checkpoint struct."},"admin()":{"notice":"Address with the authority to set initial parameters."},"checkpoint(bytes,bytes,(uint256,uint8[],string[]))":{"notice":"Checkpoint submitted by a node to update the system state."},"constructor":{"notice":"Contract constructor."},"councilMultisig()":{"notice":"Gnosis Safe address used as the council multisig."},"leader()":{"notice":"Public key of the current designated leader node."},"setAdmin(address)":{"notice":"Transfers admin control to a new address."},"setDomainSeparator(bytes32)":{"notice":"Sets the EIP-712 domain separator used for verifying signatures."},"setInitialCouncilMultisig(address)":{"notice":"Sets the initial council multisig address."},"setLeader(address)":{"notice":"Sets the leader node address."},"setNewCouncilMultisig(address)":{"notice":"Allows the current council to rotate itself to a new address."},"stateRoot(uint256)":{"notice":"The current state root, encoded as a serialized vector."},"stateRootNonce()":{"notice":"Monotonically increasing nonce for checkpoint submissions."}},"notice":"Tracks and validates state root checkpoints using EIP-712 signatures from admin and leader nodes.","version":1}},"DepositVault":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"bytes32","name":"domainSeparator","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"EmptyOrders","type":"error"},{"inputs":[],"name":"Expired","type":"error"},{"inputs":[{"internalType":"uint256","name":"expected","type":"uint256"},{"internalType":"uint256","name":"given","type":"uint256"}],"name":"InvalidNonce","type":"error"},{"inputs":[],"name":"InvalidSignature","type":"error"},{"inputs":[],"name":"NotAdmin","type":"error"},{"inputs":[],"name":"NotExecutor","type":"error"},{"inputs":[],"name":"NotOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"address","name":"tokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"address","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"address","name":"tokenIn","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"user","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"address","name":"tokenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrew","type":"event"},{"inputs":[],"name":"ORDER_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"approvedSettlers","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"user","type":"bytes32"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"depositCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct DepositVault.Settlement","name":"order","type":"tuple"},{"internalType":"bytes32","name":"user","type":"bytes32"},{"internalType":"uint256","name":"validUntil","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"executeAtomicSettlement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getApprovedSettlers","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ownerWithdrawToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"pendingSettlements","outputs":[{"components":[{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct DepositVault.Settlement","name":"settlement","type":"tuple"},{"internalType":"address","name":"target","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct DepositVault.Settlement","name":"settlement","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct DepositVault.SignedSettlement[]","name":"orders","type":"tuple[]"},{"internalType":"bytes32","name":"user","type":"bytes32"},{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"validUntil","type":"uint256"}],"name":"pullBatchSettlement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"user","type":"bytes32"}],"name":"pushBatchSettlements","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"settler","type":"bytes32"}],"name":"removeSettler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bool","name":"authorized","type":"bool"}],"name":"setAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"domainSeparator","type":"bytes32"}],"name":"setDomainSeparator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"settler","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"setSettlerExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"settlementCaps","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"settlementCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"settlerExecutorMap","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct DepositVault.Withdrawal","name":"withdrawal","type":"tuple"},{"internalType":"bytes32","name":"user","type":"bytes32"},{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"validUntil","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"withdrawalCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"contractName":"DepositVault","deploymentBytecode":{"bytecode":"0x60803460c457601f61159d38819003918201601f19168301916001600160401b0383118484101760c857808492604094855283398101031260c45780516001600160a01b038116919082900360c45760200151908015608f578060018060a01b03195f5416175f555f52600a60205260405f20600160ff198254161790556001556040516114c090816100dd8239f35b60405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037bbb732b960991b6044820152606490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f5f3560e01c806313af4035146110cd5780631a31cc4d14610f6857806324d7806c14610f2b5780632fe7a79714610e9b5780633a87fe4d14610e635780633d63ea9314610e3957806341774bfe14610d4f5780634b0bddd214610cf35780636a4a0ef814610c2a5780637438b93714610bea57806382ff8b1e14610bc057806383a7e63614610b8e5780638da5cb5b14610b6757806392698ac614610ab157806398af977214610a795780639a39f34414610732578063a815476f14610708578063bf5b0e6f14610427578063c8c57ba61461028b578063d954863c146101b1578063f585b64f146101495763f973a2091461010c575f80fd5b3461014657806003193601126101465760206040517f3a0cb10b78ebd9ca317b25e5ca18c0e451c56fb5d187fc2f8745cb1b6834d3188152f35b80fd5b503461014657606036600319011261014657610163611118565b61016b61112e565b82549091906001600160a01b031633036101a2576001600160a01b0382161561019e5761019b91604435916113db565b80f35b8280fd5b6330cd747160e01b8352600483fd5b5034610146576060366003190112610146576004356101ce61112e565b6044358015610260577f9d677c46e10ba33882144473956fae8d2c52353dcde5aab8230d1bd280cfc3b481610206859330338761142c565b8286526008602090815260408088205481516001600160a01b039790971687529186019290925293a381526008602052604081208054906001820180921161024c575580f35b634e487b7160e01b83526011600452602483fd5b606460405162461bcd60e51b81526020600482015260046024820152635a65726f60e01b6044820152fd5b503461014657602036600319011261014657600435338252600a60205260ff6040832054161561041857815b8183526006602052604083205463ffffffff821610156103af5763ffffffff9082845260066020526102ec8160408620611186565b50610335604051916102fd836111b3565b6103068161120d565b8084526005909101546001600160a01b039081166020850181905260408301516060909301519230921661142c565b51608080820151825160208085015160408087015160609788015182516001600160a01b039687168152948501939093529390931692820192909252938401529185917f9969fe768a70bff6317c8dea6fafd06f63a1ce37fd7a2a227862aced26fa7dfa91a31663ffffffff811461024c576001016102b7565b508152600660205260408120805490828155816103ca578280f35b8160060291600683040361024c57825260208220908101905b8181106103ee578280f35b808360069255836001820155836002820155836003820155836004820155836005820155016103e3565b637bfa4b9f60e01b8252600482fd5b50346106bb57366003190161012081126106bb5760a0136106bb5760c43560a43560e43567ffffffffffffffff81116106bb57610468903690600401611158565b6101049391933567ffffffffffffffff81116106bb5761048c903690600401611158565b9190948342116106f9575f858152600260205260409020546001600160a01b031633036106ea57845f52600760205260405f205495608435968088036106d35750600154936104d961126d565b9460243580976104e7611283565b6064359889928d8d6040519586956020870198610504968a6112cf565b03601f198101825261051690826111eb565b51902060405161190160f01b6020820190815260228201939093526042808201929092529081526105486062826111eb565b5190209161055592611334565b338461055f61126d565b91610569926113db565b845f52600760205260405f20805490600182018092116106bf575561058c61126d565b90333b156106bb5760845f92846040519586948593631f8eac2760e11b855260018060a01b0316600485015289602485015260606044850152816064850152848401378181018301859052601f01601f1916810103018183335af180156106b057610678575b50908161062b7f9969fe768a70bff6317c8dea6fafd06f63a1ce37fd7a2a227862aced26fa7dfa93610622611283565b3090339061142c565b61067261063661126d565b9161063f611283565b604080516001600160a01b0395861681526020810196909652931692840192909252606083019190915281906080820190565b0390a380f35b7f9969fe768a70bff6317c8dea6fafd06f63a1ce37fd7a2a227862aced26fa7dfa929195505f6106a7916111eb565b5f9490916105f2565b6040513d5f823e3d90fd5b5f80fd5b634e487b7160e01b5f52601160045260245ffd5b87906306427aeb60e01b5f5260045260245260445ffd5b6361968ebb60e11b5f5260045ffd5b630407b05b60e31b5f5260045ffd5b346106bb5760203660031901126106bb576004355f526007602052602060405f2054604051908152f35b346106bb5760803660031901126106bb5760043567ffffffffffffffff81116106bb57366023820112156106bb5780600401359067ffffffffffffffff82116106bb576024810190602436918460051b0101116106bb57602435906044356001600160a01b0381168082036106bb576064358042116106f957845f52600660205260405f20546106bb57335f52600a60205260ff60405f20541615610a6a57845f52600760205260405f205490600154938715610a5b575f925b88841061080f5788885f52600760205260405f2080549182018092116106bf5755005b61081a848a896112ad565b608081013591808303610a44575061083181611299565b91808a8c8b8960208701358094604089019961084c8b611299565b908d60608c0135998a94604051958695602087019861086b968a6112cf565b03601f198101825261087d90826111eb565b5190208d604051809160208201936108ab9185909160429261190160f01b8352600283015260228201520190565b03601f19810182526108bd90826111eb565b519020926108ca926112ad565b60a081013590601e19813603018212156106bb570180359067ffffffffffffffff82116106bb5760200181360381136106bb5761090692611334565b8b5f52600660205260405f209460405192610920846111b3565b60a0863603126106bb576109506040519261093a846111cf565b61094388611144565b8452846020850152611144565b60408301526060820152836080820152825260208201948986528054600160401b811015610a305761098791600182018155611186565b929092610a1d5751805183546001600160a01b03199081166001600160a01b0392831617855560208301516001868101919091556040840151600287018054841691851691909117905560608401516003870155608093909301516004860155965160059094018054909716931692909217909455928392610a1491908690610a0f90611299565b6113db565b019301926107ec565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b90506306427aeb60e01b5f5260045260245260445ffd5b63164bb4b560e11b5f5260045ffd5b637bfa4b9f60e01b5f5260045ffd5b346106bb5760203660031901126106bb576001600160a01b03610a9a611118565b165f526005602052602060405f2054604051908152f35b346106bb575f3660031901126106bb576040518060206003549283815201809260035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b905f5b818110610b515750505081610b0f9103826111eb565b604051918291602083019060208452518091526040830191905f5b818110610b38575050500390f35b8251845285945060209384019390920191600101610b2a565b8254845260209093019260019283019201610af9565b346106bb575f3660031901126106bb575f546040516001600160a01b039091168152602090f35b346106bb5760203660031901126106bb576004355f526002602052602060018060a01b0360405f205416604051908152f35b346106bb5760203660031901126106bb576004355f526009602052602060405f2054604051908152f35b346106bb5760203660031901126106bb575f546001600160a01b03163303610c1b576001546106bb57600435600155005b6330cd747160e01b5f5260045ffd5b346106bb5760403660031901126106bb57600435610c4661112e565b5f549091906001600160a01b03163303610c1b57805f52600460205260ff60405f20541615610c9c575b5f90815260026020526040902080546001600160a01b0319166001600160a01b03909216919091179055005b600354600160401b811015610a3057610cd5610cbf826001859401600355611255565b819391549060031b91821b915f19901b19161790565b9055805f52600460205260405f20600160ff19825416179055610c70565b346106bb5760403660031901126106bb57610d0c611118565b602435908115158092036106bb575f546001600160a01b03163303610c1b5760018060a01b03165f52600a60205260405f209060ff801983541691161790555f80f35b346106bb5760203660031901126106bb575f54600435906001600160a01b03163303610c1b576003545f5b818110610db1575b5f838152600460209081526040808320805460ff191690556002909152902080546001600160a01b0319169055005b82610dbb82611255565b90549060031b1c14610dcf57600101610d7a565b905f1981019081116106bf57610cbf610dea610df792611255565b90549060031b1c92611255565b90556003548015610e25575f1901610e0e81611255565b81545f19600392831b1b1916909155558180610d82565b634e487b7160e01b5f52603160045260245ffd5b346106bb5760203660031901126106bb576004355f526008602052602060405f2054604051908152f35b346106bb5760203660031901126106bb576004356003548110156106bb57610e8c602091611255565b90549060031b1c604051908152f35b346106bb5760403660031901126106bb576024356004355f52600660205260405f2080548210156106bb5760c091610ed291611186565b50610edc8161120d565b6005909101546040805183516001600160a01b039081168252602080860151908301528285015181169282019290925260608085015190820152608093840151938101939093521660a0820152f35b346106bb5760203660031901126106bb576001600160a01b03610f4c611118565b165f52600a602052602060ff60405f2054166040519015158152f35b346106bb57366003190160e081126106bb576060136106bb576064356084356001600160a01b03811681036106bb5760a4359060c43567ffffffffffffffff81116106bb57610fbb903690600401611158565b9290918142116106f957845f52600960205260405f205493604435948086036110b657507fc4f5735f1abe60807c07c06560e4a6d7eb655a37442b6a47e3ab1998c9611e2f9286949261106f611077936001549561101761126d565b9660243597889660405191602083019384526bffffffffffffffffffffffff199060601b1660408301528760548301528b60748301528c609483015260b482015260b4815261106760d4826111eb565b519020611334565b610a0f61126d565b61107f61126d565b604080516001600160a01b039290921682526020820192909252a35f52600960205260405f20805490600182018092116106bf5755005b85906306427aeb60e01b5f5260045260245260445ffd5b346106bb5760203660031901126106bb576110e6611118565b5f54906001600160a01b0382163303610c1b576001600160a01b03169081156106bb576001600160a01b031916175f55005b600435906001600160a01b03821682036106bb57565b602435906001600160a01b03821682036106bb57565b35906001600160a01b03821682036106bb57565b9181601f840112156106bb5782359167ffffffffffffffff83116106bb57602083818601950101116106bb57565b805482101561119f575f52600660205f20910201905f90565b634e487b7160e01b5f52603260045260245ffd5b6040810190811067ffffffffffffffff821117610a3057604052565b60a0810190811067ffffffffffffffff821117610a3057604052565b90601f8019910116810190811067ffffffffffffffff821117610a3057604052565b9060405161121a816111cf565b82546001600160a01b039081168252600184015460208301526002840154166040820152600383015460608201526004909201546080830152565b60035481101561119f5760035f5260205f2001905f90565b6004356001600160a01b03811681036106bb5790565b6044356001600160a01b03811681036106bb5790565b356001600160a01b03811681036106bb5790565b919081101561119f5760051b8101359060be19813603018212156106bb570190565b93909796959260e095926101008601997f3a0cb10b78ebd9ca317b25e5ca18c0e451c56fb5d187fc2f8745cb1b6834d318875260018060a01b03166020870152604086015260018060a01b03166060850152608084015260a083015260c08201520152565b604080515f9490939181146113b05760411461137e575050505b6001600160a01b03165f908152600a602052604090205460ff161561136f57565b638baa579f60e01b5f5260045ffd5b604080929394508101355f1a60205281375b5f526020604060805f60015afa505f6060523d606018519060405261134e565b5060208082013560ff81901c601b0190915290356040526001600160ff1b0316606052909150611390565b919060145260345263a9059cbb60601b5f5260205f6044601082855af1908160015f5114161561140e575b50505f603452565b3b153d17101561141f575f80611406565b6390b8ec185f526004601cfd5b916040519360605260405260601b602c526323b872dd60601b600c5260205f6064601c82855af1908160015f5114161561146c575b50505f606052604052565b3b153d17101561147d575f80611461565b637939f4245f526004601cfdfea2646970667358221220e28fdfc42ac8081878440455905c561d89d9784bc15747728a844cd00cfd21ba64736f6c634300081e0033"},"devdoc":{"kind":"dev","methods":{"constructor":{"params":{"_owner":"The address to set as the owner."}},"deposit(bytes32,address,uint256)":{"details":"Reverts if the amount is 0.","params":{"amount":": The amount of the token to deposit.","tokenAddress":": The address of the token to deposit.","user":": The user whose account will be credited with the deposit."}},"executeAtomicSettlement((address,uint256,address,uint256,uint256),bytes32,uint256,bytes,bytes)":{"details":"Reverts with `Expired` if the block timestamp is greater than `validUntil`.Reverts with `NotExecutor`; Only the executor can settle.Reverts with `InvalidNonce` if the nonce has already been used.Reverts with `SignatureError` if the signer is not an admin.","params":{"data":": The data to execute as part of settlement callback.","order":": The settlement order.","signature":": The signature from the t+ clearing engine.","user":": The t+ user who is executing the settlement.","validUntil":": How long until the signature expires."}},"getApprovedSettlers()":{"returns":{"_0":"An array of addresses (as bytes32) that are currently approved settlers."}},"pullBatchSettlement(((address,uint256,address,uint256,uint256),bytes)[],bytes32,address,uint256)":{"details":"Reverts with `Expired` if the block timestamp is greater than `validUntil`.Reverts if a batch settlement has already started.Reverts with `NotAdmin`; Only an admin can execute the settlement.Reverts with `InvalidNonce` if the nonce has already been used.Reverts with `SignatureError` if the signer is not an admin.","params":{"orders":": The settlement orders.","target":": The target address to send the token to, pull tokens from, and execute callback on.","user":": The t+ user who is executing the settlement.","validUntil":": The timestamp when the settlement signature expires."}},"pushBatchSettlements(bytes32)":{"details":"Reverts with `NotAdmin`; Only an admin can execute the settlement.","params":{"user":": The t+ user who is executing the settlement."}},"removeSettler(bytes32)":{"details":"Reverts with `NotOwner`; Only the admin can remove a settler.","params":{"settler":": The settler's tplus account key."}},"setAdmin(address,bool)":{"details":"Reverts with `NotOwner` if called by an address other than the admin.","params":{"account":"The address to grant or revoke approval rights.","authorized":"Whether the account is authorized to approve settlements/withdrawals."}},"setDomainSeparator(bytes32)":{"details":"Reverts with `NotOwner`; Only the admin can set the domain separator.","params":{"domainSeparator":": The value to set."}},"setOwner(address)":{"details":"Reverts with `NotOwner`; Only the owner can set a new owner."},"setSettlerExecutor(bytes32,address)":{"details":"Reverts with `NotOwner`; Only the admin can set the settler executor.","params":{"executor":": The settler's assigned executor address.","settler":": The settler's tplus account key."}},"withdraw((address,uint256,uint256),bytes32,address,uint256,bytes)":{"details":"Reverts with `Expired` if the block timestamp is greater than `validUntil`.Reverts with `InvalidNonce` if the nonce has already been used.Reverts with `SignatureError` if the signer is not an admin.","params":{"signature":": t+ clearing engine signature.","target":": The target address to send the token to.","user":": The user whose account will be debited by the withdrawal.","validUntil":": The timestamp when the withdrawal signature expires.","withdrawal":": The withdrawal token and amount."}}},"stateVariables":{"ORDER_TYPEHASH":{"details":"ORDER_TYPEHASH = keccak256(\"Order(address tokenOut,uint256 amountOut,address tokenIn,uint256 amountIn,bytes32 user,uint256 nonce,uint256 validUntil)\");"},"owner":{"details":"Should be set to the DStack container shared secret address."},"settlementCaps":{"details":"Currently unused \u2014 implementation pending design finalization."}},"version":1},"methodIdentifiers":{"ORDER_TYPEHASH()":"0xf973a209","approvedSettlers(uint256)":"0x3a87fe4d","deposit(bytes32,address,uint256)":"0xd954863c","depositCounts(bytes32)":"0x3d63ea93","executeAtomicSettlement((address,uint256,address,uint256,uint256),bytes32,uint256,bytes,bytes)":"0xbf5b0e6f","getApprovedSettlers()":"0x92698ac6","isAdmin(address)":"0x24d7806c","owner()":"0x8da5cb5b","ownerWithdrawToken(address,address,uint256)":"0xf585b64f","pendingSettlements(bytes32,uint256)":"0x2fe7a797","pullBatchSettlement(((address,uint256,address,uint256,uint256),bytes)[],bytes32,address,uint256)":"0x9a39f344","pushBatchSettlements(bytes32)":"0xc8c57ba6","removeSettler(bytes32)":"0x41774bfe","setAdmin(address,bool)":"0x4b0bddd2","setDomainSeparator(bytes32)":"0x7438b937","setOwner(address)":"0x13af4035","setSettlerExecutor(bytes32,address)":"0x6a4a0ef8","settlementCaps(address)":"0x98af9772","settlementCounts(bytes32)":"0xa815476f","settlerExecutorMap(bytes32)":"0x83a7e636","withdraw((address,uint256,uint256),bytes32,address,uint256,bytes)":"0x1a31cc4d","withdrawalCounts(bytes32)":"0x82ff8b1e"},"runtimeBytecode":{"bytecode":"0x60806040526004361015610011575f80fd5b5f5f3560e01c806313af4035146110cd5780631a31cc4d14610f6857806324d7806c14610f2b5780632fe7a79714610e9b5780633a87fe4d14610e635780633d63ea9314610e3957806341774bfe14610d4f5780634b0bddd214610cf35780636a4a0ef814610c2a5780637438b93714610bea57806382ff8b1e14610bc057806383a7e63614610b8e5780638da5cb5b14610b6757806392698ac614610ab157806398af977214610a795780639a39f34414610732578063a815476f14610708578063bf5b0e6f14610427578063c8c57ba61461028b578063d954863c146101b1578063f585b64f146101495763f973a2091461010c575f80fd5b3461014657806003193601126101465760206040517f3a0cb10b78ebd9ca317b25e5ca18c0e451c56fb5d187fc2f8745cb1b6834d3188152f35b80fd5b503461014657606036600319011261014657610163611118565b61016b61112e565b82549091906001600160a01b031633036101a2576001600160a01b0382161561019e5761019b91604435916113db565b80f35b8280fd5b6330cd747160e01b8352600483fd5b5034610146576060366003190112610146576004356101ce61112e565b6044358015610260577f9d677c46e10ba33882144473956fae8d2c52353dcde5aab8230d1bd280cfc3b481610206859330338761142c565b8286526008602090815260408088205481516001600160a01b039790971687529186019290925293a381526008602052604081208054906001820180921161024c575580f35b634e487b7160e01b83526011600452602483fd5b606460405162461bcd60e51b81526020600482015260046024820152635a65726f60e01b6044820152fd5b503461014657602036600319011261014657600435338252600a60205260ff6040832054161561041857815b8183526006602052604083205463ffffffff821610156103af5763ffffffff9082845260066020526102ec8160408620611186565b50610335604051916102fd836111b3565b6103068161120d565b8084526005909101546001600160a01b039081166020850181905260408301516060909301519230921661142c565b51608080820151825160208085015160408087015160609788015182516001600160a01b039687168152948501939093529390931692820192909252938401529185917f9969fe768a70bff6317c8dea6fafd06f63a1ce37fd7a2a227862aced26fa7dfa91a31663ffffffff811461024c576001016102b7565b508152600660205260408120805490828155816103ca578280f35b8160060291600683040361024c57825260208220908101905b8181106103ee578280f35b808360069255836001820155836002820155836003820155836004820155836005820155016103e3565b637bfa4b9f60e01b8252600482fd5b50346106bb57366003190161012081126106bb5760a0136106bb5760c43560a43560e43567ffffffffffffffff81116106bb57610468903690600401611158565b6101049391933567ffffffffffffffff81116106bb5761048c903690600401611158565b9190948342116106f9575f858152600260205260409020546001600160a01b031633036106ea57845f52600760205260405f205495608435968088036106d35750600154936104d961126d565b9460243580976104e7611283565b6064359889928d8d6040519586956020870198610504968a6112cf565b03601f198101825261051690826111eb565b51902060405161190160f01b6020820190815260228201939093526042808201929092529081526105486062826111eb565b5190209161055592611334565b338461055f61126d565b91610569926113db565b845f52600760205260405f20805490600182018092116106bf575561058c61126d565b90333b156106bb5760845f92846040519586948593631f8eac2760e11b855260018060a01b0316600485015289602485015260606044850152816064850152848401378181018301859052601f01601f1916810103018183335af180156106b057610678575b50908161062b7f9969fe768a70bff6317c8dea6fafd06f63a1ce37fd7a2a227862aced26fa7dfa93610622611283565b3090339061142c565b61067261063661126d565b9161063f611283565b604080516001600160a01b0395861681526020810196909652931692840192909252606083019190915281906080820190565b0390a380f35b7f9969fe768a70bff6317c8dea6fafd06f63a1ce37fd7a2a227862aced26fa7dfa929195505f6106a7916111eb565b5f9490916105f2565b6040513d5f823e3d90fd5b5f80fd5b634e487b7160e01b5f52601160045260245ffd5b87906306427aeb60e01b5f5260045260245260445ffd5b6361968ebb60e11b5f5260045ffd5b630407b05b60e31b5f5260045ffd5b346106bb5760203660031901126106bb576004355f526007602052602060405f2054604051908152f35b346106bb5760803660031901126106bb5760043567ffffffffffffffff81116106bb57366023820112156106bb5780600401359067ffffffffffffffff82116106bb576024810190602436918460051b0101116106bb57602435906044356001600160a01b0381168082036106bb576064358042116106f957845f52600660205260405f20546106bb57335f52600a60205260ff60405f20541615610a6a57845f52600760205260405f205490600154938715610a5b575f925b88841061080f5788885f52600760205260405f2080549182018092116106bf5755005b61081a848a896112ad565b608081013591808303610a44575061083181611299565b91808a8c8b8960208701358094604089019961084c8b611299565b908d60608c0135998a94604051958695602087019861086b968a6112cf565b03601f198101825261087d90826111eb565b5190208d604051809160208201936108ab9185909160429261190160f01b8352600283015260228201520190565b03601f19810182526108bd90826111eb565b519020926108ca926112ad565b60a081013590601e19813603018212156106bb570180359067ffffffffffffffff82116106bb5760200181360381136106bb5761090692611334565b8b5f52600660205260405f209460405192610920846111b3565b60a0863603126106bb576109506040519261093a846111cf565b61094388611144565b8452846020850152611144565b60408301526060820152836080820152825260208201948986528054600160401b811015610a305761098791600182018155611186565b929092610a1d5751805183546001600160a01b03199081166001600160a01b0392831617855560208301516001868101919091556040840151600287018054841691851691909117905560608401516003870155608093909301516004860155965160059094018054909716931692909217909455928392610a1491908690610a0f90611299565b6113db565b019301926107ec565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b90506306427aeb60e01b5f5260045260245260445ffd5b63164bb4b560e11b5f5260045ffd5b637bfa4b9f60e01b5f5260045ffd5b346106bb5760203660031901126106bb576001600160a01b03610a9a611118565b165f526005602052602060405f2054604051908152f35b346106bb575f3660031901126106bb576040518060206003549283815201809260035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b905f5b818110610b515750505081610b0f9103826111eb565b604051918291602083019060208452518091526040830191905f5b818110610b38575050500390f35b8251845285945060209384019390920191600101610b2a565b8254845260209093019260019283019201610af9565b346106bb575f3660031901126106bb575f546040516001600160a01b039091168152602090f35b346106bb5760203660031901126106bb576004355f526002602052602060018060a01b0360405f205416604051908152f35b346106bb5760203660031901126106bb576004355f526009602052602060405f2054604051908152f35b346106bb5760203660031901126106bb575f546001600160a01b03163303610c1b576001546106bb57600435600155005b6330cd747160e01b5f5260045ffd5b346106bb5760403660031901126106bb57600435610c4661112e565b5f549091906001600160a01b03163303610c1b57805f52600460205260ff60405f20541615610c9c575b5f90815260026020526040902080546001600160a01b0319166001600160a01b03909216919091179055005b600354600160401b811015610a3057610cd5610cbf826001859401600355611255565b819391549060031b91821b915f19901b19161790565b9055805f52600460205260405f20600160ff19825416179055610c70565b346106bb5760403660031901126106bb57610d0c611118565b602435908115158092036106bb575f546001600160a01b03163303610c1b5760018060a01b03165f52600a60205260405f209060ff801983541691161790555f80f35b346106bb5760203660031901126106bb575f54600435906001600160a01b03163303610c1b576003545f5b818110610db1575b5f838152600460209081526040808320805460ff191690556002909152902080546001600160a01b0319169055005b82610dbb82611255565b90549060031b1c14610dcf57600101610d7a565b905f1981019081116106bf57610cbf610dea610df792611255565b90549060031b1c92611255565b90556003548015610e25575f1901610e0e81611255565b81545f19600392831b1b1916909155558180610d82565b634e487b7160e01b5f52603160045260245ffd5b346106bb5760203660031901126106bb576004355f526008602052602060405f2054604051908152f35b346106bb5760203660031901126106bb576004356003548110156106bb57610e8c602091611255565b90549060031b1c604051908152f35b346106bb5760403660031901126106bb576024356004355f52600660205260405f2080548210156106bb5760c091610ed291611186565b50610edc8161120d565b6005909101546040805183516001600160a01b039081168252602080860151908301528285015181169282019290925260608085015190820152608093840151938101939093521660a0820152f35b346106bb5760203660031901126106bb576001600160a01b03610f4c611118565b165f52600a602052602060ff60405f2054166040519015158152f35b346106bb57366003190160e081126106bb576060136106bb576064356084356001600160a01b03811681036106bb5760a4359060c43567ffffffffffffffff81116106bb57610fbb903690600401611158565b9290918142116106f957845f52600960205260405f205493604435948086036110b657507fc4f5735f1abe60807c07c06560e4a6d7eb655a37442b6a47e3ab1998c9611e2f9286949261106f611077936001549561101761126d565b9660243597889660405191602083019384526bffffffffffffffffffffffff199060601b1660408301528760548301528b60748301528c609483015260b482015260b4815261106760d4826111eb565b519020611334565b610a0f61126d565b61107f61126d565b604080516001600160a01b039290921682526020820192909252a35f52600960205260405f20805490600182018092116106bf5755005b85906306427aeb60e01b5f5260045260245260445ffd5b346106bb5760203660031901126106bb576110e6611118565b5f54906001600160a01b0382163303610c1b576001600160a01b03169081156106bb576001600160a01b031916175f55005b600435906001600160a01b03821682036106bb57565b602435906001600160a01b03821682036106bb57565b35906001600160a01b03821682036106bb57565b9181601f840112156106bb5782359167ffffffffffffffff83116106bb57602083818601950101116106bb57565b805482101561119f575f52600660205f20910201905f90565b634e487b7160e01b5f52603260045260245ffd5b6040810190811067ffffffffffffffff821117610a3057604052565b60a0810190811067ffffffffffffffff821117610a3057604052565b90601f8019910116810190811067ffffffffffffffff821117610a3057604052565b9060405161121a816111cf565b82546001600160a01b039081168252600184015460208301526002840154166040820152600383015460608201526004909201546080830152565b60035481101561119f5760035f5260205f2001905f90565b6004356001600160a01b03811681036106bb5790565b6044356001600160a01b03811681036106bb5790565b356001600160a01b03811681036106bb5790565b919081101561119f5760051b8101359060be19813603018212156106bb570190565b93909796959260e095926101008601997f3a0cb10b78ebd9ca317b25e5ca18c0e451c56fb5d187fc2f8745cb1b6834d318875260018060a01b03166020870152604086015260018060a01b03166060850152608084015260a083015260c08201520152565b604080515f9490939181146113b05760411461137e575050505b6001600160a01b03165f908152600a602052604090205460ff161561136f57565b638baa579f60e01b5f5260045ffd5b604080929394508101355f1a60205281375b5f526020604060805f60015afa505f6060523d606018519060405261134e565b5060208082013560ff81901c601b0190915290356040526001600160ff1b0316606052909150611390565b919060145260345263a9059cbb60601b5f5260205f6044601082855af1908160015f5114161561140e575b50505f603452565b3b153d17101561141f575f80611406565b6390b8ec185f526004601cfd5b916040519360605260405260601b602c526323b872dd60601b600c5260205f6064601c82855af1908160015f5114161561146c575b50505f606052604052565b3b153d17101561147d575f80611461565b637939f4245f526004601cfdfea2646970667358221220e28fdfc42ac8081878440455905c561d89d9784bc15747728a844cd00cfd21ba64736f6c634300081e0033"},"sourceId":"src/DepositVault.sol","sourcemap":"332:16367:5:-:0;;;;;;;;;;;;;-1:-1:-1;;332:16367:5;;;;-1:-1:-1;;;;;332:16367:5;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;332:16367:5;;;;;;;;;;;;4624:20;;;332:16367;;;;;;;;;-1:-1:-1;332:16367:5;;;-1:-1:-1;332:16367:5;-1:-1:-1;332:16367:5;4696:7;332:16367;;;-1:-1:-1;332:16367:5;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;332:16367:5;;;;;;;;;;;;-1:-1:-1;;;332:16367:5;;;;;;;;-1:-1:-1;332:16367:5;;;;;;-1:-1:-1;332:16367:5;;;;;-1:-1:-1;332:16367:5","userdoc":{"errors":{"EmptyOrders()":[{"notice":"Reverts if an order array is empty."}],"Expired()":[{"notice":"Reverts if a signed operation is past its deadline."}],"InvalidNonce(uint256,uint256)":[{"notice":"Reverts if the nonce used in a transaction is incorrect."}],"InvalidSignature()":[{"notice":"Reverts if the signature provided is invalid."}],"NotAdmin()":[{"notice":"Reverts if the caller is not an admin."}],"NotExecutor()":[{"notice":"Reverts if the caller is not the authorized executor."}],"NotOwner()":[{"notice":"Reverts if the caller is not the owner."}]},"events":{"Deposited(bytes32,uint256,address,uint256)":{"notice":"Signals a deposit."},"Settled(bytes32,uint256,address,uint256,address,uint256)":{"notice":"Signals a settlement."},"Withdrew(bytes32,uint256,address,uint256)":{"notice":"Signals a withdrawal."}},"kind":"user","methods":{"ORDER_TYPEHASH()":{"notice":"EIP-712 typehash for an Order struct used in off-chain signature verification."},"approvedSettlers(uint256)":{"notice":"List of all approved settler IDs."},"constructor":{"notice":"Initializes the contract and sets the owner. Also permits the owner to authorize settlements and withdrawals."},"deposit(bytes32,address,uint256)":{"notice":"Deposits a token into the vault."},"depositCounts(bytes32)":{"notice":"Maps settler IDs to their deposit count (nonce)."},"executeAtomicSettlement((address,uint256,address,uint256,uint256),bytes32,uint256,bytes,bytes)":{"notice":"Executes an atomic settlement."},"getApprovedSettlers()":{"notice":"Get the array of approved settlers."},"isAdmin(address)":{"notice":"True for any valid authority; used in settlement/withdrawal signature verification."},"owner()":{"notice":"The admin approves settlements and withdrawals."},"pendingSettlements(bytes32,uint256)":{"notice":"Maps settler IDs to their queue of pending batch settlements."},"pullBatchSettlement(((address,uint256,address,uint256,uint256),bytes)[],bytes32,address,uint256)":{"notice":"Pulls funds for execution during a settlement batch."},"pushBatchSettlements(bytes32)":{"notice":"Pushes expected funds from a batch settlement to the deposit vault."},"removeSettler(bytes32)":{"notice":"Removes a settler."},"setAdmin(address,bool)":{"notice":"Grants or revokes settlement and withdrawal approval rights to an address."},"setDomainSeparator(bytes32)":{"notice":"Sets the domain separators for EIP-712 signatures."},"setOwner(address)":{"notice":"Sets the owner of the vault."},"setSettlerExecutor(bytes32,address)":{"notice":"Sets the settle executor."},"settlementCaps(address)":{"notice":"Maximum total tokens that can be settled in a single block for each token."},"settlementCounts(bytes32)":{"notice":"Maps settler IDs to their settlement count (nonce)."},"settlerExecutorMap(bytes32)":{"notice":"Maps settler IDs to their executor addresses."},"withdraw((address,uint256,uint256),bytes32,address,uint256,bytes)":{"notice":"Withdraws a token from the vault."},"withdrawalCounts(bytes32)":{"notice":"Maps settler IDs to their withdrawal count (nonce)."}},"version":1}},"IAtomicSettlementCallback":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onAtomicSettlement","outputs":[],"stateMutability":"nonpayable","type":"function"}],"contractName":"IAtomicSettlementCallback","deploymentBytecode":{"bytecode":"0x"},"devdoc":{"kind":"dev","methods":{},"version":1},"methodIdentifiers":{"onAtomicSettlement(address,uint256,bytes)":"0x3f1d584e"},"runtimeBytecode":{"bytecode":"0x"},"sourceId":"src/interfaces/IAtomicSettlementCallback.sol","sourcemap":"","userdoc":{"kind":"user","methods":{},"version":1}},"MockTarget":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onAtomicSettlement","outputs":[],"stateMutability":"nonpayable","type":"function"}],"contractName":"MockTarget","deploymentBytecode":{"bytecode":"0x6080806040523460135760b1908160188239f35b5f80fdfe6004361015600b575f80fd5b5f3560e01c633f1d584e14601d575f80fd5b3460775760603660031901126077576004356001600160a01b0381160360775760443567ffffffffffffffff811160775736602382011215607757806004013567ffffffffffffffff811160775736910160240111607757005b5f80fdfea26469706673582212206cf91bafe3a0f54d58f9735d82a4757234fa3d217135826792ecef05e5d5837c64736f6c634300081c0033"},"devdoc":{"kind":"dev","methods":{},"version":1},"methodIdentifiers":{"onAtomicSettlement(address,uint256,bytes)":"0x3f1d584e"},"runtimeBytecode":{"bytecode":"0x6004361015600b575f80fd5b5f3560e01c633f1d584e14601d575f80fd5b3460775760603660031901126077576004356001600160a01b0381160360775760443567ffffffffffffffff811160775736602382011215607757806004013567ffffffffffffffff811160775736910160240111607757005b5f80fdfea26469706673582212206cf91bafe3a0f54d58f9735d82a4757234fa3d217135826792ecef05e5d5837c64736f6c634300081c0033"},"sourceId":"src/MockTarget.sol","sourcemap":"149:148:4:-:0;;;;;;;;;;;;;;;;;","userdoc":{"kind":"user","methods":{},"version":1}},"Registry":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"NotAdmin","type":"error"},{"inputs":[],"name":"NotRiskManager","type":"error"},{"inputs":[{"internalType":"uint256","name":"chain","type":"uint256"},{"internalType":"bytes32","name":"addr","type":"bytes32"}],"name":"addVault","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"councilMultisig","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"},{"internalType":"uint16","name":"index","type":"uint16"}],"name":"getAssetData","outputs":[{"components":[{"internalType":"bytes32","name":"assetAddress","type":"bytes32"},{"internalType":"uint64","name":"chainId","type":"uint64"},{"internalType":"uint256","name":"maxDeposits","type":"uint256"}],"internalType":"struct Registry.AssetData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"},{"internalType":"bytes32","name":"assetAddress","type":"bytes32"}],"name":"getAssetIndex","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAssets","outputs":[{"components":[{"internalType":"bytes32","name":"assetAddress","type":"bytes32"},{"internalType":"uint64","name":"chainId","type":"uint64"},{"internalType":"uint256","name":"maxDeposits","type":"uint256"}],"internalType":"struct Registry.AssetData[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRiskParameters","outputs":[{"components":[{"internalType":"uint8","name":"collateralFactor","type":"uint8"},{"internalType":"uint8","name":"liabilityFactor","type":"uint8"},{"internalType":"uint256","name":"maxCollateral","type":"uint256"},{"internalType":"uint256","name":"maxLiabilities","type":"uint256"}],"internalType":"struct Registry.RiskParameters[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVaults","outputs":[{"components":[{"internalType":"uint256","name":"chain","type":"uint256"},{"internalType":"bytes32","name":"vaultAddress","type":"bytes32"}],"internalType":"struct Registry.Vault[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"riskManagerMultisig","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"}],"name":"riskParameters","outputs":[{"internalType":"uint8","name":"collateralFactor","type":"uint8"},{"internalType":"uint8","name":"liabilityFactor","type":"uint8"},{"internalType":"uint256","name":"maxCollateral","type":"uint256"},{"internalType":"uint256","name":"maxLiabilities","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAdmin","type":"address"}],"name":"setAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"index","type":"uint16"},{"components":[{"internalType":"bytes32","name":"assetAddress","type":"bytes32"},{"internalType":"uint64","name":"chainId","type":"uint64"},{"internalType":"uint256","name":"maxDeposits","type":"uint256"}],"internalType":"struct Registry.AssetData","name":"data","type":"tuple"}],"name":"setAssetData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"multisig","type":"address"}],"name":"setCouncilMultisig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"multisig","type":"address"}],"name":"setRiskManagerMultisig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"index","type":"uint16"},{"components":[{"internalType":"uint8","name":"collateralFactor","type":"uint8"},{"internalType":"uint8","name":"liabilityFactor","type":"uint8"},{"internalType":"uint256","name":"maxCollateral","type":"uint256"},{"internalType":"uint256","name":"maxLiabilities","type":"uint256"}],"internalType":"struct Registry.RiskParameters","name":"parameters","type":"tuple"}],"name":"setRiskParameters","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"vaults","outputs":[{"internalType":"uint256","name":"chain","type":"uint256"},{"internalType":"bytes32","name":"vaultAddress","type":"bytes32"}],"stateMutability":"view","type":"function"}],"contractName":"Registry","deploymentBytecode":{"bytecode":"0x608080604052346026575f80546001600160a01b03191633179055610c7a908161002b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816307ddaf5314610a7157508063114bb9c514610a1957806339006126146109e45780633e1120531461099157806344d00f82146108c05780634ffcbdfb1461086d578063525ea8b71461084557806367e4ac2c14610681578063704b6c02146106345780638c64ea4a146105f7578063b68604381461050e578063ba94626c146103ca578063c9c8679614610240578063ca4ec14b1461019d578063f247ceb9146100f75763f851a440146100cc575f80fd5b346100f3575f3660031901126100f3575f546040516001600160a01b039091168152602090f35b5f80fd5b346100f35760403660031901126100f357610110610aa5565b60243561ffff81168091036100f357610127610bf5565b505f5260066020526001600160401b0360405f2091165f52602052606060405f206002610152610b0a565b91805483526001600160401b0360018201541660208401520154604082015261019b604051809260408091805184526001600160401b0360208201511660208501520151910152565bf35b346100f35760403660031901126100f3575f546001600160a01b03163303610231576101c7610aeb565b600435815260208101906024358252600454600160401b81101561021d578060016101f59201600455610abb565b92909261020a57600191518355519101555f80f35b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b637bfa4b9f60e01b5f5260045ffd5b346100f35760803660031901126100f357610259610a94565b60603660231901126100f35761026d610b0a565b6024358152604435916001600160401b03831683036100f35760208201928352606435604083019081526001549091906001600160a01b031633036103bc5761ffff1691825f526006602052600160405f2001541590835f52600660205260405f206001600160401b0380875116165f52602052600260405f20541593855f52600660205260405f206001600160401b0380895116165f5260205260405f2092518355600183016001600160401b038851166001600160401b031982541617905551910155610392575b61033d57005b5f5260066020526001600160401b03600160405f2001915116908054600160401b81101561021d5761037491600182018155610c0f565b6001600160401b03829392549160031b92831b921b19161790555f80f35b600554600181018091116103a857600555610337565b634e487b7160e01b5f52601160045260245ffd5b6206732360e51b5f5260045ffd5b346100f3575f3660031901126100f3576005546103ee6103e982610bde565b610b48565b81815290601f196103fe82610bde565b015f5b8181106104e35750505f5b61ffff811690828210156104775761046c82610472935f52600360205260405f206002610437610b29565b9160ff8154818116855260081c16602084015260018101546040840152015460608201526104658288610c30565b5285610c30565b50610b6d565b61040c565b836040518091602082016020835281518091526020604084019201905f5b8181106104a3575050500390f35b91935091602060806001926060875160ff815116835260ff8582015116858401526040810151604084015201516060820152019401910191849392610495565b6020906104ee610b29565b5f81525f838201525f60408201525f606082015282828701015201610401565b346100f35760a03660031901126100f357610527610a94565b60803660231901126100f35761053b610b29565b9060243560ff811681036100f357825260443560ff811681036100f357602083019081526040830160643581526060840191608435835260018060a01b036001541633036103bc5761ffff6005549416938410156105c9576002935f52600360205260ff60405f2095511661ff008654925160081b169161ffff191617178455516001840155519101555f80f35b60405162461bcd60e51b815260206004820152600660248201526508585cdcd95d60d21b6044820152606490fd5b346100f35760203660031901126100f3576004356004548110156100f357610620604091610abb565b506001815491015482519182526020820152f35b346100f35760203660031901126100f3576004356001600160a01b038116908190036100f3575f546001600160a01b03811633036102315781156100f3576001600160a01b031916175f55005b346100f3575f3660031901126100f3576005545f90815b61ffff8316828110156106cd575f526006602052600160405f20015481018091116103a8576106c79092610b6d565b91610698565b50906106db6103e983610bde565b918083526106eb601f1991610bde565b015f5b81811061082e57825f85815b61ffff831690848210156107c1575f905b825f526006602052600160405f2001548210156107ac575f8381526006602052604090206001600160401b03806107458560018501610c0f565b90549060031b1c16165f5260205260405f206002610761610b0a565b91805483526001600160401b0360018201541660208401520154604082015261078a8286610c30565b526107958185610c30565b50600181018091116103a85760019091019061070b565b949390506107ba9150610b6d565b91926106fa565b826040518091602082016020835281518091526020604084019201905f5b8181106107ed575050500390f35b919350916020606082610820600194885160408091805184526001600160401b0360208201511660208501520151910152565b0194019101918493926107df565b602090610839610bf5565b828287010152016106ee565b346100f3575f3660031901126100f3576001546040516001600160a01b039091168152602090f35b346100f35760203660031901126100f3576004356001600160a01b038116908190036100f3575f546001600160a01b03163303610231576bffffffffffffffffffffffff60a01b60015416176001555f80f35b346100f3575f3660031901126100f3576004546108df6103e982610bde565b9080825260208201908160045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5f915b838310610968578486604051918291602083019060208452518091526040830191905f5b818110610943575050500390f35b8251805185526020908101518186015286955060409094019390920191600101610935565b60026020600192610977610aeb565b855481528486015483820152815201920192019190610911565b346100f35760203660031901126100f3576004356001600160a01b038116908190036100f3575f546001600160a01b03163303610231576bffffffffffffffffffffffff60a01b60025416176002555f80f35b346100f35760403660031901126100f3576020610a0b610a02610aa5565b60243590610b80565b63ffffffff60405191168152f35b346100f35760203660031901126100f35761ffff610a35610a94565b165f526003602052608060405f20805490600260018201549101549060ff60405193818116855260081c16602084015260408301526060820152f35b346100f3575f3660031901126100f3576002546001600160a01b03168152602090f35b6004359061ffff821682036100f357565b600435906001600160401b03821682036100f357565b600454811015610ad75760045f5260205f209060011b01905f90565b634e487b7160e01b5f52603260045260245ffd5b60405190604082018281106001600160401b0382111761021d57604052565b60405190606082018281106001600160401b0382111761021d57604052565b60405190608082018281106001600160401b0382111761021d57604052565b6040519190601f01601f191682016001600160401b0381118382101761021d57604052565b61ffff1661ffff81146103a85760010190565b60055490915f5b61ffff811683811015610bd157805f52600660205260405f206001600160401b0386165f5260205260405f20548314610bc95750610bc490610b6d565b610b87565b935050505090565b505050505063ffffffff90565b6001600160401b03811161021d5760051b60200190565b610bfd610b0a565b905f82525f60208301525f6040830152565b9190918054831015610ad7575f52601860205f208360021c019260031b1690565b8051821015610ad75760209160051b01019056fea2646970667358221220cf4acfa4c4d45b846ac7ad204826c948d006d9b451a6446540a50d4c7ca58fec64736f6c634300081e0033"},"devdoc":{"details":"Uses admin and multisig roles to control sensitive operations like asset registration and risk configuration.","kind":"dev","methods":{"addVault(uint256,bytes32)":{"details":"Reverts with `NotAdmin`; Only the admin can add a vault.","params":{"addr":"The vault address. Uses bytes32 to support non-EVM chains.","chain":"The chain ID the vault is deployed on."}},"constructor":{"details":"Sets the deployer as the initial admin."},"getAssetData(uint64,uint16)":{"params":{"chainId":"The chain ID to query.","index":"The asset index to query."},"returns":{"_0":"The corresponding AssetData struct."}},"getAssetIndex(uint64,bytes32)":{"params":{"assetAddress":"The asset address (as bytes32).","chainId":"The chain ID to search."},"returns":{"_0":"The index of the asset, or `type(uint32).max` if not found."}},"getAssets()":{"returns":{"_0":"An array of AssetData structs."}},"getRiskParameters()":{"returns":{"_0":"An array of RiskParameters."}},"getVaults()":{"returns":{"_0":"An array of Vault."}},"setAdmin(address)":{"details":"Reverts with `NotAdmin`; Only the admin can set a new admin.Reverts if attempting to set the admin to the zero address.","params":{"newAdmin":"The new admin address."}},"setAssetData(uint16,(bytes32,uint64,uint256))":{"details":"Automatically adds new assets or chain instances if not already present.Reverts with `NotRiskManager`; Only the risk manager can set asset data.","params":{"data":"The chain-specific asset data.","index":"The asset index."}},"setCouncilMultisig(address)":{"details":"Reverts with `NotAdmin`; Only the admin can set a council.","params":{"multisig":"The new address to set."}},"setRiskManagerMultisig(address)":{"details":"Reverts with `NotAdmin`; Only the admin can set a risk manager.","params":{"multisig":"The new address to set."}},"setRiskParameters(uint16,(uint8,uint8,uint256,uint256))":{"details":"Reverts with `NotRiskManager`; Ony the risk manager can set risk parameters.Reverts with `\"!asset\"` if index >= assets.count.","params":{"index":"The asset index.","parameters":"The risk parameters to apply."}}},"title":"Registry","version":1},"methodIdentifiers":{"addVault(uint256,bytes32)":"0xca4ec14b","admin()":"0xf851a440","councilMultisig()":"0x07ddaf53","getAssetData(uint64,uint16)":"0xf247ceb9","getAssetIndex(uint64,bytes32)":"0x39006126","getAssets()":"0x67e4ac2c","getRiskParameters()":"0xba94626c","getVaults()":"0x44d00f82","riskManagerMultisig()":"0x525ea8b7","riskParameters(uint16)":"0x114bb9c5","setAdmin(address)":"0x704b6c02","setAssetData(uint16,(bytes32,uint64,uint256))":"0xc9c86796","setCouncilMultisig(address)":"0x3e112053","setRiskManagerMultisig(address)":"0x4ffcbdfb","setRiskParameters(uint16,(uint8,uint8,uint256,uint256))":"0xb6860438","vaults(uint256)":"0x8c64ea4a"},"runtimeBytecode":{"bytecode":"0x6080806040526004361015610012575f80fd5b5f3560e01c90816307ddaf5314610a7157508063114bb9c514610a1957806339006126146109e45780633e1120531461099157806344d00f82146108c05780634ffcbdfb1461086d578063525ea8b71461084557806367e4ac2c14610681578063704b6c02146106345780638c64ea4a146105f7578063b68604381461050e578063ba94626c146103ca578063c9c8679614610240578063ca4ec14b1461019d578063f247ceb9146100f75763f851a440146100cc575f80fd5b346100f3575f3660031901126100f3575f546040516001600160a01b039091168152602090f35b5f80fd5b346100f35760403660031901126100f357610110610aa5565b60243561ffff81168091036100f357610127610bf5565b505f5260066020526001600160401b0360405f2091165f52602052606060405f206002610152610b0a565b91805483526001600160401b0360018201541660208401520154604082015261019b604051809260408091805184526001600160401b0360208201511660208501520151910152565bf35b346100f35760403660031901126100f3575f546001600160a01b03163303610231576101c7610aeb565b600435815260208101906024358252600454600160401b81101561021d578060016101f59201600455610abb565b92909261020a57600191518355519101555f80f35b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b637bfa4b9f60e01b5f5260045ffd5b346100f35760803660031901126100f357610259610a94565b60603660231901126100f35761026d610b0a565b6024358152604435916001600160401b03831683036100f35760208201928352606435604083019081526001549091906001600160a01b031633036103bc5761ffff1691825f526006602052600160405f2001541590835f52600660205260405f206001600160401b0380875116165f52602052600260405f20541593855f52600660205260405f206001600160401b0380895116165f5260205260405f2092518355600183016001600160401b038851166001600160401b031982541617905551910155610392575b61033d57005b5f5260066020526001600160401b03600160405f2001915116908054600160401b81101561021d5761037491600182018155610c0f565b6001600160401b03829392549160031b92831b921b19161790555f80f35b600554600181018091116103a857600555610337565b634e487b7160e01b5f52601160045260245ffd5b6206732360e51b5f5260045ffd5b346100f3575f3660031901126100f3576005546103ee6103e982610bde565b610b48565b81815290601f196103fe82610bde565b015f5b8181106104e35750505f5b61ffff811690828210156104775761046c82610472935f52600360205260405f206002610437610b29565b9160ff8154818116855260081c16602084015260018101546040840152015460608201526104658288610c30565b5285610c30565b50610b6d565b61040c565b836040518091602082016020835281518091526020604084019201905f5b8181106104a3575050500390f35b91935091602060806001926060875160ff815116835260ff8582015116858401526040810151604084015201516060820152019401910191849392610495565b6020906104ee610b29565b5f81525f838201525f60408201525f606082015282828701015201610401565b346100f35760a03660031901126100f357610527610a94565b60803660231901126100f35761053b610b29565b9060243560ff811681036100f357825260443560ff811681036100f357602083019081526040830160643581526060840191608435835260018060a01b036001541633036103bc5761ffff6005549416938410156105c9576002935f52600360205260ff60405f2095511661ff008654925160081b169161ffff191617178455516001840155519101555f80f35b60405162461bcd60e51b815260206004820152600660248201526508585cdcd95d60d21b6044820152606490fd5b346100f35760203660031901126100f3576004356004548110156100f357610620604091610abb565b506001815491015482519182526020820152f35b346100f35760203660031901126100f3576004356001600160a01b038116908190036100f3575f546001600160a01b03811633036102315781156100f3576001600160a01b031916175f55005b346100f3575f3660031901126100f3576005545f90815b61ffff8316828110156106cd575f526006602052600160405f20015481018091116103a8576106c79092610b6d565b91610698565b50906106db6103e983610bde565b918083526106eb601f1991610bde565b015f5b81811061082e57825f85815b61ffff831690848210156107c1575f905b825f526006602052600160405f2001548210156107ac575f8381526006602052604090206001600160401b03806107458560018501610c0f565b90549060031b1c16165f5260205260405f206002610761610b0a565b91805483526001600160401b0360018201541660208401520154604082015261078a8286610c30565b526107958185610c30565b50600181018091116103a85760019091019061070b565b949390506107ba9150610b6d565b91926106fa565b826040518091602082016020835281518091526020604084019201905f5b8181106107ed575050500390f35b919350916020606082610820600194885160408091805184526001600160401b0360208201511660208501520151910152565b0194019101918493926107df565b602090610839610bf5565b828287010152016106ee565b346100f3575f3660031901126100f3576001546040516001600160a01b039091168152602090f35b346100f35760203660031901126100f3576004356001600160a01b038116908190036100f3575f546001600160a01b03163303610231576bffffffffffffffffffffffff60a01b60015416176001555f80f35b346100f3575f3660031901126100f3576004546108df6103e982610bde565b9080825260208201908160045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5f915b838310610968578486604051918291602083019060208452518091526040830191905f5b818110610943575050500390f35b8251805185526020908101518186015286955060409094019390920191600101610935565b60026020600192610977610aeb565b855481528486015483820152815201920192019190610911565b346100f35760203660031901126100f3576004356001600160a01b038116908190036100f3575f546001600160a01b03163303610231576bffffffffffffffffffffffff60a01b60025416176002555f80f35b346100f35760403660031901126100f3576020610a0b610a02610aa5565b60243590610b80565b63ffffffff60405191168152f35b346100f35760203660031901126100f35761ffff610a35610a94565b165f526003602052608060405f20805490600260018201549101549060ff60405193818116855260081c16602084015260408301526060820152f35b346100f3575f3660031901126100f3576002546001600160a01b03168152602090f35b6004359061ffff821682036100f357565b600435906001600160401b03821682036100f357565b600454811015610ad75760045f5260205f209060011b01905f90565b634e487b7160e01b5f52603260045260245ffd5b60405190604082018281106001600160401b0382111761021d57604052565b60405190606082018281106001600160401b0382111761021d57604052565b60405190608082018281106001600160401b0382111761021d57604052565b6040519190601f01601f191682016001600160401b0381118382101761021d57604052565b61ffff1661ffff81146103a85760010190565b60055490915f5b61ffff811683811015610bd157805f52600660205260405f206001600160401b0386165f5260205260405f20548314610bc95750610bc490610b6d565b610b87565b935050505090565b505050505063ffffffff90565b6001600160401b03811161021d5760051b60200190565b610bfd610b0a565b905f82525f60208301525f6040830152565b9190918054831015610ad7575f52601860205f208360021c019260031b1690565b8051821015610ad75760209160051b01019056fea2646970667358221220cf4acfa4c4d45b846ac7ad204826c948d006d9b451a6446540a50d4c7ca58fec64736f6c634300081e0033"},"sourceId":"src/Registry.sol","sourcemap":"313:7996:6:-:0;;;;;;;2876:18;313:7996;;-1:-1:-1;;;;;;313:7996:6;2884:10;313:7996;;;;;;;;;;;;;","userdoc":{"errors":{"NotAdmin()":[{"notice":"Reverts if caller is not the admin."}],"NotRiskManager()":[{"notice":"Reverts if caller is not the risk manager multisig."}]},"kind":"user","methods":{"addVault(uint256,bytes32)":{"notice":"Register a new deposit vault contract instance."},"admin()":{"notice":"Address of the admin; primarily used for initial setup."},"constructor":{"notice":"Contract constructor."},"councilMultisig()":{"notice":"Multisig wallet address for the broader governance council."},"getAssetData(uint64,uint16)":{"notice":"Retrieves asset data for a specific asset and chain."},"getAssetIndex(uint64,bytes32)":{"notice":"Returns the asset index for a given chain and address."},"getAssets()":{"notice":"Returns all registered asset data across all chains."},"getRiskParameters()":{"notice":"Returns the full list of risk parameters for all registered assets."},"getVaults()":{"notice":"Returns the full list of registered vaults."},"riskManagerMultisig()":{"notice":"Multisig wallet address responsible for managing risk-related configurations."},"riskParameters(uint16)":{"notice":"Mapping of asset index to associated risk parameters."},"setAdmin(address)":{"notice":"Updates the admin address."},"setAssetData(uint16,(bytes32,uint64,uint256))":{"notice":"Sets or updates asset data for a specific asset index and chain."},"setCouncilMultisig(address)":{"notice":"Updates the council multisig address."},"setRiskManagerMultisig(address)":{"notice":"Updates the risk manager multisig address."},"setRiskParameters(uint16,(uint8,uint8,uint256,uint256))":{"notice":"Sets risk parameters for a specific asset index."},"vaults(uint256)":{"notice":"All registered vaults."}},"notice":"Central registry for managing assets and associated risk parameters across multiple chains.","version":1}},"SigTest":{"abi":[{"inputs":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"check","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"contractName":"SigTest","deploymentBytecode":{"bytecode":"0x608080604052346015576101c9908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c63197ff59b14610024575f80fd5b346100a35760603660031901126100a3576004356001600160a01b03811681036100a35760443567ffffffffffffffff81116100a357366023820112156100a357806004013567ffffffffffffffff81116100a35736602482840101116100a3576020926024610099930190602435906100a7565b6040519015158152f35b5f80fd5b92939290915f906001600160a01b0383161561018a576040519160048301602484019560448501916064860193873b156101115750936064938a80948a9b9c9460209b9a9998630b135d3f60e11b8a525260408a52523701915afa9051630b135d3f60e11b141690565b99935050939550508060401461015e5760411461012e5750505050565b60408092939496508101355f1a60205281375b5f526020600160805f825afa511860601b3d11915f606052604052565b5060208082013560ff81901c601b0190915290356040526001600160ff1b031660605291935090610141565b505f945050505056fea26469706673582212208a106949f349498c2239c8e95c70bad1b3b3e62a5294423000b592793b14c09564736f6c634300081c0033"},"devdoc":{"kind":"dev","methods":{},"version":1},"methodIdentifiers":{"check(address,bytes32,bytes)":"0x197ff59b"},"runtimeBytecode":{"bytecode":"0x60806040526004361015610011575f80fd5b5f3560e01c63197ff59b14610024575f80fd5b346100a35760603660031901126100a3576004356001600160a01b03811681036100a35760443567ffffffffffffffff81116100a357366023820112156100a357806004013567ffffffffffffffff81116100a35736602482840101116100a3576020926024610099930190602435906100a7565b6040519015158152f35b5f80fd5b92939290915f906001600160a01b0383161561018a576040519160048301602484019560448501916064860193873b156101115750936064938a80948a9b9c9460209b9a9998630b135d3f60e11b8a525260408a52523701915afa9051630b135d3f60e11b141690565b99935050939550508060401461015e5760411461012e5750505050565b60408092939496508101355f1a60205281375b5f526020600160805f825afa511860601b3d11915f606052604052565b5060208082013560ff81901c601b0190915290356040526001600160ff1b031660605291935090610141565b505f945050505056fea26469706673582212208a106949f349498c2239c8e95c70bad1b3b3e62a5294423000b592793b14c09564736f6c634300081c0033"},"sourceId":"src/SigTest.sol","sourcemap":"140:221:1:-:0;;;;;;;;;;;;;;;;;","userdoc":{"kind":"user","methods":{},"version":1}}},"manifest":"ethpm/3","sources":{"src/Checkpointer.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport {EfficientHashLib} from \"solady/utils/EfficientHashLib.sol\";\nimport {SignatureCheckerLib} from \"solady/utils/SignatureCheckerLib.sol\";\n\n/**\n * @title Checkpointer\n * @notice Tracks and validates state root checkpoints using EIP-712 signatures from admin and leader nodes.\n * @dev Designed for use in DStack-like distributed settlement systems.\n */\ncontract Checkpointer {\n    /**\n     * @notice Address with the authority to set initial parameters.\n     * @dev Should be set to the DStack app shared secret public key.\n     */\n    address public admin;\n\n    /**\n     * @notice Public key of the current designated leader node.\n     * @dev Leader is responsible for signing and submitting new checkpoints.\n     */\n    address public leader;\n\n    /**\n     * @notice Gnosis Safe address used as the council multisig.\n     * @dev Can rotate the leader and self.\n     */\n    address public councilMultisig;\n\n    /**\n     * @notice Monotonically increasing nonce for checkpoint submissions.\n     * @dev Used to prevent replay attacks and enforce checkpoint ordering.\n     */\n    uint256 public stateRootNonce;\n\n    /// @notice Typehash used for EIP-712 encoding of the Checkpoint struct.\n    bytes32 public constant CHECKPOINT_TYPEHASH =\n        keccak256(\"Checkpoint(uint256 nonce,uint8[] stateRoot,string[] approvedWithdrawals)\");\n\n    /**\n     * @notice Emitted when a new list of approved withdrawals is recorded in a checkpoint.\n     * @param approvedWithdrawals List of withdrawal IDs approved in the checkpoint.\n     */\n    event Withdrawals(string[] approvedWithdrawals);\n\n    /// @notice Cached domain separator for EIP-712 signature verification.\n    bytes32 internal _domainSeparator;\n\n    /**\n     * @notice The current state root, encoded as a serialized vector.\n     * @dev Serialized as `(user, eth_balance, usdc_balance, deposit_nonce, is_mm)` tuples.\n     *      In production, this may store multiple roots and rotate.\n     */\n    uint8[] public stateRoot;\n\n    /// @notice Reverts if caller is not the admin.\n    error NotAdmin();\n\n    /// @notice Reverts if a value has already been set.\n    error AlreadySet();\n\n    /// @notice Reverts if caller is not the current council multisig.\n    error NotCouncilMultisig();\n\n    /// @notice Reverts if a signature does not match the expected signer or payload.\n    error InvalidSignature();\n\n    /**\n     * @notice Contract constructor.\n     * @dev Sets the deployer as the initial admin.\n     */\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /**\n     * @notice Sets the EIP-712 domain separator used for verifying signatures.\n     * @param domainSeparator The domain separator to store.\n     */\n    function setDomainSeparator(bytes32 domainSeparator) external {\n        if (msg.sender != admin) revert NotAdmin();\n        if (_domainSeparator != 0) revert AlreadySet();\n        _domainSeparator = domainSeparator;\n    }\n\n    /**\n     * @notice Transfers admin control to a new address.\n     * @param newAdmin The new admin address.\n     */\n    function setAdmin(address newAdmin) external {\n        if (msg.sender != admin) revert NotAdmin();\n        require(newAdmin != address(0));\n        admin = newAdmin;\n    }\n\n    /**\n     * @notice Sets the initial council multisig address.\n     * @param newCouncilMultisig The council's Gnosis Safe address.\n     */\n    function setInitialCouncilMultisig(address newCouncilMultisig) external {\n        if (msg.sender != admin) revert NotAdmin();\n        if (councilMultisig != address(0)) revert AlreadySet();\n        councilMultisig = newCouncilMultisig;\n    }\n\n    /**\n     * @notice Allows the current council to rotate itself to a new address.\n     * @param newCouncilMultisig The new multisig address.\n     */\n    function setNewCouncilMultisig(address newCouncilMultisig) external {\n        if (msg.sender != councilMultisig) revert NotCouncilMultisig();\n        councilMultisig = newCouncilMultisig;\n    }\n\n    /**\n     * @notice Sets the leader node address.\n     * @dev This should be reviewed depending on the leader rotation mechanism.\n     * @param newLeader The address of the new leader node.\n     */\n    function setLeader(address newLeader) external {\n        if (msg.sender != councilMultisig) revert NotCouncilMultisig();\n        leader = newLeader;\n    }\n\n    /**\n     * @notice Checkpoint submitted by a node to update the system state.\n     * @dev Requires valid EIP-712 signatures from both admin and leader.\n     * @param sharedSignature Signature by the admin.\n     * @param leaderSignature Signature by the leader.\n     * @param _checkpoint The checkpoint payload to commit.\n     */\n    function checkpoint(\n        bytes calldata sharedSignature,\n        bytes calldata leaderSignature,\n        Checkpoint calldata _checkpoint\n    ) external {\n        require(_checkpoint.nonce == stateRootNonce); // dev: Nonce mismatch\n\n        // Compute the EIP-712 struct hash.\n        bytes32 structHash = EfficientHashLib.hash(\n            abi.encode(\n                CHECKPOINT_TYPEHASH,\n                _checkpoint.nonce,\n                EfficientHashLib.hash(abi.encodePacked(_checkpoint.stateRoot)),\n                hashStringArray(_checkpoint.approvedWithdrawals)\n            )\n        );\n\n        // Check both admin and leader signatures.\n        bytes32 digest =\n            EfficientHashLib.hash(abi.encodePacked(\"\\x19\\x01\", _domainSeparator, structHash));\n\n        if (!SignatureCheckerLib.isValidSignatureNow(admin, digest, sharedSignature)) {\n            revert InvalidSignature();\n        }\n\n        if (!SignatureCheckerLib.isValidSignatureNow(leader, digest, leaderSignature)) {\n            revert InvalidSignature();\n        }\n\n        stateRootNonce++;\n        stateRoot = _checkpoint.stateRoot;\n\n        emit Withdrawals(_checkpoint.approvedWithdrawals);\n    }\n\n    /**\n     * @notice Internal helper for hashing an array of strings.\n     * @dev Each string is hashed individually and packed before final hashing.\n     * @param arr The array of strings to hash.\n     * @return A single keccak256 hash of the packed array of hashed strings.\n     */\n    function hashStringArray(string[] memory arr) internal pure returns (bytes32) {\n        bytes32[] memory hashedStrings = new bytes32[](arr.length);\n        for (uint256 i = 0; i < arr.length; i++) {\n            hashedStrings[i] = EfficientHashLib.hash(bytes(arr[i]));\n        }\n        return EfficientHashLib.hash(abi.encodePacked(hashedStrings));\n    }\n\n    /**\n     * @notice Struct defining a checkpoint message.\n     * @dev Checkpoints include the current state root, a nonce, and a list of approved withdrawals.\n     */\n    struct Checkpoint {\n        uint256 nonce;\n        uint8[] stateRoot;\n        string[] approvedWithdrawals;\n    }\n}\n","urls":[]},"src/DepositVault.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport {SafeTransferLib} from \"solady/utils/SafeTransferLib.sol\";\nimport {EfficientHashLib} from \"solady/utils/EfficientHashLib.sol\";\nimport {ECDSA} from \"solady/utils/ECDSA.sol\";\nimport {IAtomicSettlementCallback} from \"./interfaces/IAtomicSettlementCallback.sol\";\n\ncontract DepositVault {\n    /**\n     * @notice The admin approves settlements and withdrawals.\n     * @dev Should be set to the DStack container shared secret address.\n     */\n    address public owner;\n\n    /// @notice EIP-712 domain separator used for signature verification.\n    bytes32 internal _domainSeparator;\n\n    /// @notice Maps settler IDs to their executor addresses.\n    mapping(bytes32 => address) public settlerExecutorMap;\n\n    /// @notice List of all approved settler IDs.\n    bytes32[] public approvedSettlers;\n\n    /// @notice Tracks which settler IDs have been approved.\n    mapping(bytes32 => bool) internal settlerIsApproved;\n\n    /**\n     * @notice Maximum total tokens that can be settled in a single block for each token.\n     * @dev Currently unused \u2014 implementation pending design finalization.\n     */\n    mapping(address => uint256) public settlementCaps;\n\n    /// @notice Maps settler IDs to their queue of pending batch settlements.\n    mapping(bytes32 => PendingSettlement[]) public pendingSettlements;\n\n    /// @notice Maps settler IDs to their settlement count (nonce).\n    mapping(bytes32 => uint256) public settlementCounts;\n\n    /// @notice Maps settler IDs to their deposit count (nonce).\n    mapping(bytes32 => uint256) public depositCounts;\n\n    /// @notice Maps settler IDs to their withdrawal count (nonce).\n    mapping(bytes32 => uint256) public withdrawalCounts;\n\n    /// @notice True for any valid authority; used in settlement/withdrawal signature verification.\n    mapping(address => bool) public isAdmin;\n\n    /**\n     * @notice EIP-712 typehash for an Order struct used in off-chain signature verification.\n     * @dev ORDER_TYPEHASH = keccak256(\"Order(address tokenOut,uint256 amountOut,address tokenIn,uint256 amountIn,bytes32 user,uint256 nonce,uint256 validUntil)\");\n     */\n    bytes32 public constant ORDER_TYPEHASH =\n        0x3a0cb10b78ebd9ca317b25e5ca18c0e451c56fb5d187fc2f8745cb1b6834d318;\n\n    /**\n     * @notice A single settlement request for token swaps.\n     * @dev Used in both atomic and batch settlements.\n     */\n    struct Settlement {\n        address tokenOut;\n        uint256 amountOut;\n        address tokenIn;\n        uint256 amountIn;\n        uint256 nonce;\n    }\n\n    /// @notice A settlement plus an off-chain signature from an authorized party.\n    struct SignedSettlement {\n        Settlement settlement;\n        bytes signature;\n    }\n\n    /**\n     * @notice Stores pending settlements for a given user when batch settlement is used.\n     * @dev Target is the address expected to execute the settlement.\n     */\n    struct PendingSettlement {\n        Settlement settlement;\n        address target;\n    }\n\n    /// @notice Records a withdrawal.\n    struct Withdrawal {\n        address tokenAddress;\n        uint256 amount;\n        uint256 nonce;\n    }\n\n    /// @notice Signals a settlement.\n    event Settled(\n        bytes32 indexed user,\n        uint256 indexed nonce,\n        address tokenOut,\n        uint256 amountOut,\n        address tokenIn,\n        uint256 amountIn\n    );\n\n    /// @notice Signals a deposit.\n    event Deposited(\n        bytes32 indexed user, uint256 indexed nonce, address tokenAddress, uint256 amount\n    );\n\n    /// @notice Signals a withdrawal.\n    event Withdrew(\n        bytes32 indexed user, uint256 indexed nonce, address tokenAddress, uint256 amount\n    );\n\n    /// @notice Reverts if the caller is not the owner.\n    error NotOwner();\n\n    /// @notice Reverts if the caller is not an admin.\n    error NotAdmin();\n\n    /// @notice Reverts if the caller is not the authorized executor.\n    error NotExecutor();\n\n    /// @notice Reverts if a signed operation is past its deadline.\n    error Expired();\n\n    /// @notice Reverts if the nonce used in a transaction is incorrect.\n    error InvalidNonce(uint256 expected, uint256 given);\n\n    /// @notice Reverts if the signature provided is invalid.\n    error InvalidSignature();\n\n    /// @notice Reverts if an order array is empty.\n    error EmptyOrders();\n\n    /**\n     * @notice Initializes the contract and sets the owner. Also permits the owner to authorize\n     * settlements and withdrawals.\n     * @param _owner The address to set as the owner.\n     */\n    constructor(address _owner, bytes32 domainSeparator) {\n        require(_owner != address(0), \"Invalid owner\");\n        owner = _owner;\n        isAdmin[_owner] = true;\n        _domainSeparator = domainSeparator;\n    }\n\n    /**\n     * @notice Sets the owner of the vault.\n     * @dev Reverts with `NotOwner`; Only the owner can set a new owner.\n     */\n    function setOwner(address newOwner) external {\n        if (msg.sender != owner) revert NotOwner();\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n    /**\n     * @notice Sets the domain separators for EIP-712 signatures.\n     * @param domainSeparator: The value to set.\n     * @dev Reverts with `NotOwner`; Only the admin can set the domain separator.\n     */\n    function setDomainSeparator(bytes32 domainSeparator) external {\n        if (msg.sender != owner) revert NotOwner();\n        require(_domainSeparator == 0); // dev: Already set.\n        _domainSeparator = domainSeparator;\n    }\n\n    /**\n     * @notice Sets the settle executor.\n     * @param settler: The settler's tplus account key.\n     * @param executor: The settler's assigned executor address.\n     * @dev Reverts with `NotOwner`; Only the admin can set the settler executor.\n     */\n    function setSettlerExecutor(bytes32 settler, address executor) external {\n        if (msg.sender != owner) revert NotOwner();\n        if (!settlerIsApproved[settler]) {\n            approvedSettlers.push(settler);\n            settlerIsApproved[settler] = true;\n        }\n\n        settlerExecutorMap[settler] = executor;\n    }\n\n    /**\n     * @notice Removes a settler.\n     * @param settler: The settler's tplus account key.\n     * @dev Reverts with `NotOwner`; Only the admin can remove a settler.\n     */\n    function removeSettler(bytes32 settler) external {\n        if (msg.sender != owner) revert NotOwner();\n        uint256 length = approvedSettlers.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (approvedSettlers[i] == settler) {\n                // Move last element to this spot and pop the last element.\n                approvedSettlers[i] = approvedSettlers[length - 1];\n                approvedSettlers.pop();\n                break;\n            }\n        }\n\n        settlerIsApproved[settler] = false;\n        settlerExecutorMap[settler] = address(0);\n    }\n\n    /**\n     * @notice Grants or revokes settlement and withdrawal approval rights to an address.\n     * @param account The address to grant or revoke approval rights.\n     * @param authorized Whether the account is authorized to approve settlements/withdrawals.\n     * @dev Reverts with `NotOwner` if called by an address other than the admin.\n     */\n    function setAdmin(address account, bool authorized) external {\n        if (msg.sender != owner) revert NotOwner();\n        isAdmin[account] = authorized;\n    }\n\n    /**\n     * @notice Deposits a token into the vault.\n     * @param user: The user whose account will be credited with the deposit.\n     * @param tokenAddress: The address of the token to deposit.\n     * @param amount: The amount of the token to deposit.\n     * @dev Reverts if the amount is 0.\n     */\n    function deposit(bytes32 user, address tokenAddress, uint256 amount) external {\n        require(amount != 0, \"Zero\");\n\n        // Move tokens from the target user to this vault.\n        SafeTransferLib.safeTransferFrom(tokenAddress, msg.sender, address(this), amount);\n\n        emit Deposited(user, depositCounts[user], tokenAddress, amount);\n        depositCounts[user] += 1;\n    }\n\n    /**\n     * @notice Executes an atomic settlement.\n     * @param order: The settlement order.\n     * @param user: The t+ user who is executing the settlement.\n     * @param validUntil: How long until the signature expires.\n     * @param data: The data to execute as part of settlement callback.\n     * @param signature: The signature from the t+ clearing engine.\n     * @dev Reverts with `Expired` if the block timestamp is greater than `validUntil`.\n     * @dev Reverts with `NotExecutor`; Only the executor can settle.\n     * @dev Reverts with `InvalidNonce` if the nonce has already been used.\n     * @dev Reverts with `SignatureError` if the signer is not an admin.\n     */\n    function executeAtomicSettlement(\n        Settlement calldata order,\n        bytes32 user,\n        uint256 validUntil,\n        bytes calldata data,\n        bytes calldata signature\n    ) external {\n        if (block.timestamp > validUntil) revert Expired();\n        if (settlerExecutorMap[user] != msg.sender) revert NotExecutor();\n\n        uint256 expectedNonce = settlementCounts[user];\n        if (order.nonce != expectedNonce) revert InvalidNonce(expectedNonce, order.nonce);\n\n        bytes32 domainSeparator = _domainSeparator;\n\n        bytes32 structHash = EfficientHashLib.hash(\n            abi.encode(\n                ORDER_TYPEHASH,\n                order.tokenOut,\n                order.amountOut,\n                order.tokenIn,\n                order.amountIn,\n                user,\n                order.nonce,\n                validUntil\n            )\n        );\n\n        bytes32 digest =\n            EfficientHashLib.hash(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n\n        checkApproval(digest, signature);\n\n        SafeTransferLib.safeTransfer(order.tokenOut, msg.sender, order.amountOut);\n\n        // Ensure to bump the nonce _before_ the callback to avoid signature replay.\n        settlementCounts[user] += 1;\n\n        IAtomicSettlementCallback(msg.sender).onAtomicSettlement(\n            order.tokenOut, order.amountOut, data\n        );\n        SafeTransferLib.safeTransferFrom(order.tokenIn, msg.sender, address(this), order.amountIn);\n\n        emit Settled(\n            user, order.nonce, order.tokenOut, order.amountOut, order.tokenIn, order.amountIn\n        );\n    }\n\n    /**\n     * @notice Pulls funds for execution during a settlement batch.\n     * @param orders: The settlement orders.\n     * @param user: The t+ user who is executing the settlement.\n     * @param target: The target address to send the token to, pull tokens from, and execute callback on.\n     * @param validUntil: The timestamp when the settlement signature expires.\n     * @dev Reverts with `Expired` if the block timestamp is greater than `validUntil`.\n     * @dev Reverts if a batch settlement has already started.\n     * @dev Reverts with `NotAdmin`; Only an admin can execute the settlement.\n     * @dev Reverts with `InvalidNonce` if the nonce has already been used.\n     * @dev Reverts with `SignatureError` if the signer is not an admin.\n     */\n    function pullBatchSettlement(\n        SignedSettlement[] calldata orders,\n        bytes32 user,\n        address target,\n        uint256 validUntil\n    ) external {\n        if (block.timestamp > validUntil) revert Expired();\n        require(pendingSettlements[user].length == 0); // dev: Already started.\n        if (!isAdmin[msg.sender]) revert NotAdmin();\n\n        uint256 expectedNonce = settlementCounts[user];\n        bytes32 domainSeparator = _domainSeparator;\n        uint256 ordersLength = orders.length;\n        if (ordersLength == 0) revert EmptyOrders();\n\n        // Unchecked is OK to use to save gas on the for loops.\n        unchecked {\n            for (uint256 i = 0; i < ordersLength; ++i) {\n                Settlement calldata s = orders[i].settlement;\n\n                uint256 nonce = s.nonce;\n                if (nonce != expectedNonce) revert InvalidNonce(expectedNonce, nonce);\n\n                bytes32 structHash = EfficientHashLib.hash(\n                    abi.encode(\n                        ORDER_TYPEHASH,\n                        s.tokenOut,\n                        s.amountOut,\n                        s.tokenIn,\n                        s.amountIn,\n                        user,\n                        nonce,\n                        validUntil\n                    )\n                );\n\n                bytes32 digest =\n                    EfficientHashLib.hash(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n\n                checkApproval(digest, orders[i].signature);\n                pendingSettlements[user].push(PendingSettlement(s, target));\n                SafeTransferLib.safeTransfer(s.tokenOut, target, s.amountOut);\n\n                expectedNonce = nonce + 1;\n            }\n        }\n\n        settlementCounts[user] += ordersLength;\n    }\n\n    /**\n     * @notice Pushes expected funds from a batch settlement to the deposit vault.\n     * @param user: The t+ user who is executing the settlement.\n     * @dev Reverts with `NotAdmin`; Only an admin can execute the settlement.\n     */\n    function pushBatchSettlements(bytes32 user) external {\n        if (!isAdmin[msg.sender]) revert NotAdmin();\n\n        for (uint32 i = 0; i < pendingSettlements[user].length; i++) {\n            PendingSettlement memory pendingSettlement = pendingSettlements[user][i];\n\n            SafeTransferLib.safeTransferFrom(\n                pendingSettlement.settlement.tokenIn,\n                pendingSettlement.target,\n                address(this),\n                pendingSettlement.settlement.amountIn\n            );\n            emit Settled(\n                user,\n                pendingSettlement.settlement.nonce,\n                pendingSettlement.settlement.tokenOut,\n                pendingSettlement.settlement.amountOut,\n                pendingSettlement.settlement.tokenIn,\n                pendingSettlement.settlement.amountIn\n            );\n        }\n        delete pendingSettlements[user];\n    }\n\n    /**\n     * @notice Withdraws a token from the vault.\n     * @param withdrawal: The withdrawal token and amount.\n     * @param user: The user whose account will be debited by the withdrawal.\n     * @param target: The target address to send the token to.\n     * @param validUntil: The timestamp when the withdrawal signature expires.\n     * @param signature: t+ clearing engine signature.\n     * @dev Reverts with `Expired` if the block timestamp is greater than `validUntil`.\n     * @dev Reverts with `InvalidNonce` if the nonce has already been used.\n     * @dev Reverts with `SignatureError` if the signer is not an admin.\n     */\n    function withdraw(\n        Withdrawal calldata withdrawal,\n        bytes32 user,\n        address target,\n        uint256 validUntil,\n        bytes calldata signature\n    ) external {\n        if (block.timestamp > validUntil) revert Expired();\n\n        uint256 expectedNonce = withdrawalCounts[user];\n        if (withdrawal.nonce != expectedNonce) revert InvalidNonce(expectedNonce, withdrawal.nonce);\n\n        // NOTE: This is intentionally not EIP-712 compliant (it is just purposely similar as well).\n        // Reason: Unnecessary extra computation; not signed by an actual wallet.\n        checkApproval(\n            EfficientHashLib.hash(\n                abi.encodePacked(\n                    _domainSeparator,\n                    withdrawal.tokenAddress,\n                    withdrawal.amount,\n                    user,\n                    withdrawal.nonce,\n                    validUntil\n                )\n            ),\n            signature\n        );\n\n        SafeTransferLib.safeTransfer(withdrawal.tokenAddress, target, withdrawal.amount);\n        emit Withdrew(user, withdrawal.nonce, withdrawal.tokenAddress, withdrawal.amount);\n        withdrawalCounts[user] += 1;\n    }\n\n    /**\n     * @notice Get the array of approved settlers.\n     * @return An array of addresses (as bytes32) that are currently approved settlers.\n     */\n    function getApprovedSettlers() external view returns (bytes32[] memory) {\n        return approvedSettlers;\n    }\n\n    // TODO: Delete this method before official production.\n    function ownerWithdrawToken(address token, address to, uint256 amount) external {\n        if (msg.sender != owner) revert NotOwner();\n        require(to != address(0));\n        SafeTransferLib.safeTransfer(token, to, amount);\n    }\n\n    function checkApproval(bytes32 digest, bytes calldata signature) internal view {\n        address signer = ECDSA.tryRecoverCalldata(digest, signature);\n        if (!isAdmin[signer]) revert InvalidSignature();\n    }\n}\n","urls":[]},"src/Registry.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\n/**\n * @title Registry\n * @notice Central registry for managing assets and associated risk parameters across multiple chains.\n * @dev Uses admin and multisig roles to control sensitive operations like asset registration and risk configuration.\n */\ncontract Registry {\n    /// @notice Address of the admin; primarily used for initial setup.\n    address public admin;\n\n    /// @notice Multisig wallet address responsible for managing risk-related configurations.\n    address public riskManagerMultisig;\n\n    /// @notice Multisig wallet address for the broader governance council.\n    address public councilMultisig;\n\n    /// @notice Mapping of asset index to associated risk parameters.\n    mapping(uint16 => RiskParameters) public riskParameters;\n\n    /// @notice All registered vaults.\n    Vault[] public vaults;\n\n    /// @notice Registry of all registered assets and associated chain data.\n    AssetRegistry assets;\n\n    /// @notice Struct defining risk-related parameters for a given asset.\n    struct RiskParameters {\n        uint8 collateralFactor;\n        uint8 liabilityFactor;\n        uint256 maxCollateral; // Optional: may not be enforced on-chain.\n        uint256 maxLiabilities; // Optional: may not be enforced on-chain.\n    }\n\n    /**\n     * @notice Struct for managing a list of registered assets.\n     * @dev Assets are stored by index and can span multiple chains.\n     */\n    struct AssetRegistry {\n        uint256 count; // Total number of assets.\n        mapping(uint16 => Asset) registry; // Mapping from index to asset struct.\n    }\n\n    /**\n     * @notice Struct representing an asset across multiple chains.\n     */\n    struct Asset {\n        mapping(uint64 => AssetData) data; // Chain ID => AssetData.\n        uint64[] chains; // List of all known chain IDs for this asset.\n    }\n\n    /**\n     * @notice Chain-specific metadata for an asset.\n     * @dev Uses bytes32 for `assetAddress` to support non-EVM chains like Solana.\n     */\n    struct AssetData {\n        bytes32 assetAddress;\n        uint64 chainId;\n        uint256 maxDeposits; // Cap on deposits (collateral cap).\n    }\n\n    /**\n     * @notice A registered official vault contract on any chain.\n     * @dev Uses bytes32 for `assetAddress` to support non-EVM chains like Solana.\n     */\n    struct Vault {\n        uint256 chain;\n        // NOTE: Using 'bytes32' instead of 'address' because the vault may be deployed on\n        // a change with larger address sizes, such as Solana.\n        bytes32 vaultAddress;\n    }\n\n    /// @notice Reverts if caller is not the admin.\n    error NotAdmin();\n\n    /// @notice Reverts if caller is not the risk manager multisig.\n    error NotRiskManager();\n\n    /**\n     * @notice Contract constructor.\n     * @dev Sets the deployer as the initial admin.\n     */\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /**\n     * @notice Updates the risk manager multisig address.\n     * @param multisig The new address to set.\n     * @dev Reverts with `NotAdmin`; Only the admin can set a risk manager.\n     */\n    function setRiskManagerMultisig(address multisig) external {\n        if (msg.sender != admin) revert NotAdmin();\n        riskManagerMultisig = multisig;\n    }\n\n    /**\n     * @notice Updates the council multisig address.\n     * @param multisig The new address to set.\n     * @dev Reverts with `NotAdmin`; Only the admin can set a council.\n     */\n    function setCouncilMultisig(address multisig) external {\n        if (msg.sender != admin) revert NotAdmin();\n        councilMultisig = multisig;\n    }\n\n    /**\n     * @notice Updates the admin address.\n     * @param newAdmin The new admin address.\n     * @dev Reverts with `NotAdmin`; Only the admin can set a new admin.\n     * @dev Reverts if attempting to set the admin to the zero address.\n     */\n    function setAdmin(address newAdmin) external {\n        if (msg.sender != admin) revert NotAdmin();\n        require(newAdmin != address(0));\n        admin = newAdmin;\n    }\n\n    /**\n     * @notice Sets or updates asset data for a specific asset index and chain.\n     * @dev Automatically adds new assets or chain instances if not already present.\n     * @param index The asset index.\n     * @param data The chain-specific asset data.\n     * @dev Reverts with `NotRiskManager`; Only the risk manager can set asset data.\n     */\n    function setAssetData(uint16 index, AssetData memory data) external {\n        if (msg.sender != riskManagerMultisig) revert NotRiskManager();\n\n        bool isNewAsset = assets.registry[index].chains.length <= 0;\n        bool isNewAddress = assets.registry[index].data[data.chainId].assetAddress == bytes32(0);\n\n        assets.registry[index].data[data.chainId] = data;\n\n        if (isNewAsset) {\n            assets.count += 1;\n        }\n        if (isNewAddress) {\n            assets.registry[index].chains.push(data.chainId);\n        }\n    }\n\n    /**\n     * @notice Retrieves asset data for a specific asset and chain.\n     * @param chainId The chain ID to query.\n     * @param index The asset index to query.\n     * @return The corresponding AssetData struct.\n     */\n    function getAssetData(uint64 chainId, uint16 index) external view returns (AssetData memory) {\n        return assets.registry[index].data[chainId];\n    }\n\n    /**\n     * @notice Returns all registered asset data across all chains.\n     * @return An array of AssetData structs.\n     */\n    function getAssets() external view returns (AssetData[] memory) {\n        uint256 totalEntries = 0;\n        for (uint16 i = 0; i < assets.count; i++) {\n            totalEntries += assets.registry[i].chains.length;\n        }\n\n        AssetData[] memory items = new AssetData[](totalEntries);\n        uint256 r = 0;\n        for (uint16 i = 0; i < assets.count; i++) {\n            for (uint256 c; c < assets.registry[i].chains.length; c++) {\n                items[r] = assets.registry[i].data[assets.registry[i].chains[c]];\n                r += 1;\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @notice Returns the asset index for a given chain and address.\n     * @param chainId The chain ID to search.\n     * @param assetAddress The asset address (as bytes32).\n     * @return The index of the asset, or `type(uint32).max` if not found.\n     */\n    function getAssetIndex(uint64 chainId, bytes32 assetAddress) external view returns (uint32) {\n        for (uint16 i = 0; i < assets.count; i++) {\n            if (assetAddress == assets.registry[i].data[chainId].assetAddress) {\n                return i;\n            }\n        }\n        return type(uint32).max;\n    }\n\n    /**\n     * @notice Sets risk parameters for a specific asset index.\n     * @param index The asset index.\n     * @param parameters The risk parameters to apply.\n     * @dev Reverts with `NotRiskManager`; Ony the risk manager can set risk parameters.\n     * @dev Reverts with `\"!asset\"` if index >= assets.count.\n     */\n    function setRiskParameters(uint16 index, RiskParameters memory parameters) external {\n        if (msg.sender != riskManagerMultisig) revert NotRiskManager();\n        require(index < assets.count, \"!asset\");\n        riskParameters[index] = parameters;\n    }\n\n    /**\n     * @notice Returns the full list of risk parameters for all registered assets.\n     * @return An array of RiskParameters.\n     */\n    function getRiskParameters() external view returns (RiskParameters[] memory) {\n        RiskParameters[] memory result = new RiskParameters[](assets.count);\n        for (uint16 i; i < assets.count; i++) {\n            result[i] = riskParameters[i];\n        }\n        return result;\n    }\n\n    /**\n     * @notice Register a new deposit vault contract instance.\n     * @param chain The chain ID the vault is deployed on.\n     * @param addr The vault address. Uses bytes32 to support non-EVM chains.\n     * @dev Reverts with `NotAdmin`; Only the admin can add a vault.\n     */\n    function addVault(uint256 chain, bytes32 addr) external {\n        if (msg.sender != admin) revert NotAdmin();\n        vaults.push(Vault(chain, addr));\n    }\n\n    /**\n     * @notice Returns the full list of registered vaults.\n     * @return An array of Vault.\n     */\n    function getVaults() external view returns (Vault[] memory) {\n        return vaults;\n    }\n}\n","urls":[]},"src/interfaces/IAtomicSettlementCallback.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport {DepositVault} from \"../DepositVault.sol\";\n\ninterface IAtomicSettlementCallback {\n    function onAtomicSettlement(address token, uint256 amount, bytes calldata data) external;\n}\n","urls":[]}}}